# CI/CD Pipeline for Telegram Bot with PostgreSQL and Grafana
# This workflow will lint and deploy the application to VPS

name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  deploy:
    needs: lint
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        timeout: 30s
        command_timeout: 5m
        script: |
          set -e
          
          echo "🚀 Starting deployment..."
          
          # Navigate to project directory
          cd ~/bi_telegram_bot || { echo "❌ Project directory not found"; exit 1; }
          
          # Stop existing services gracefully
          echo "⏹️ Stopping existing services..."
          pkill -f "python.*main.py" || true
          pkill -f "python.*photo_server.py" || true
          sleep 2
          
          # Stop Docker containers if running
          if [ -f "docker-compose.yml" ]; then
            docker-compose down || true
          fi
          
          # Quick backup (skip if taking too long)
          echo "💾 Creating database backup..."
          if docker ps -q --filter "name=power_bi_postgres" | grep -q .; then
            docker-compose up -d postgres
            sleep 5
            timeout 30 docker exec power_bi_postgres pg_dump -U bot_user power_bi_bot > "backup_$(date +%Y%m%d_%H%M%S).sql" || echo "⚠️ Backup skipped due to timeout"
            docker-compose down || true
          fi
          
          # Pull latest changes
          echo "📥 Pulling latest changes..."
          git fetch origin
          git reset --hard origin/main
          
          # Copy VPS environment file
          echo "🔧 Setting up environment..."
          if [ -f ".env.vps" ]; then
            cp .env.vps .env
          else
            echo "⚠️ .env.vps not found, using existing .env"
          fi
          
          # Start Docker services
          echo "🐳 Starting Docker services..."
          docker-compose up -d
          
          # Wait for database with shorter timeout
          echo "⏳ Waiting for database..."
          for i in {1..30}; do
            if docker exec power_bi_postgres pg_isready -U bot_user -d power_bi_bot 2>/dev/null; then
              echo "✅ Database is ready"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Database timeout - continuing anyway"
            fi
            sleep 2
          done
          
          # Install Python dependencies
          echo "📦 Installing Python dependencies..."
          python3 -m pip install --user -r requirements.txt || echo "⚠️ Some packages may have failed to install"
          
          # Start services
          echo "📸 Starting photo server..."
          nohup python3 photo_server.py > photo_server.log 2>&1 &
          
          echo "🤖 Starting Telegram bot..."
          nohup python3 main.py > bot.log 2>&1 &
          
          # Quick verification
          sleep 5
          echo "✅ Services started!"
          
          # Final status check
          docker-compose ps | head -10
          echo "Bot running: $(pgrep -f "python.*main.py" > /dev/null && echo "✅ YES" || echo "❌ NO")"
          echo "Photo server running: $(pgrep -f "python.*photo_server.py" > /dev/null && echo "✅ YES" || echo "❌ NO")"
          
          echo "🎉 Deployment completed!"
