# CI/CD Pipeline for Telegram Bot with PostgreSQL and Grafana
# This workflow will lint and deploy the application to VPS

name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  deploy:
    needs: lint
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        timeout: 30s
        command_timeout: 10m
        script: |
          set -e
          
          echo "� Diagnostic check..."
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Home directory: $HOME"
          
          # Check if project directory exists
          if [ -d "~/bi_telegram_bot" ]; then
            echo "✅ Project directory exists"
          else
            echo "❌ Project directory not found, creating it..."
            mkdir -p ~/bi_telegram_bot
          fi
          
          # Navigate to project directory
          cd ~/bi_telegram_bot
          echo "📍 Now in: $(pwd)"
          
          # Check if it's a git repository
          if [ -d ".git" ]; then
            echo "✅ Git repository exists"
          else
            echo "🔄 Cloning repository..."
            cd ~
            git clone https://github.com/Yerassyl20036/bi_telegram_bot.git || echo "⚠️ Clone failed, continuing..."
            cd ~/bi_telegram_bot
          fi
          
          # Check Docker
          echo "🐳 Checking Docker..."
          docker --version || echo "❌ Docker not available"
          docker-compose --version || echo "❌ Docker Compose not available"
          
          # Quick deployment
          echo "🚀 Starting deployment..."
          
          # Stop existing services
          echo "⏹️ Stopping services..."
          pkill -f "python.*main.py" || true
          pkill -f "python.*photo_server.py" || true
          
          # Pull latest changes
          echo "📥 Updating code..."
          git fetch origin || echo "⚠️ Git fetch failed"
          git reset --hard origin/main || echo "⚠️ Git reset failed"
          
          # Setup environment
          echo "🔧 Environment setup..."
          [ -f ".env.vps" ] && cp .env.vps .env || echo "⚠️ No .env.vps found"
          
          # Start minimal services
          echo "🐳 Starting Docker..."
          docker-compose down --timeout 5 || true
          docker-compose up -d || echo "⚠️ Docker start failed"
          
          # Install dependencies
          echo "📦 Dependencies..."
          python3 -m pip install --user -q -r requirements.txt || echo "⚠️ Pip install failed"
          
          # Start Python services
          echo "� Starting services..."
          nohup python3 photo_server.py > photo_server.log 2>&1 &
          nohup python3 main.py > bot.log 2>&1 &
          
          echo "✅ Deployment completed!"
          echo "Status: $(date)"
