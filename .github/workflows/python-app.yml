name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  deploy:
    needs: lint
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        timeout: 30s
        command_timeout: 10m
        script: |
          set -e
          
          # Diagnostic information
          echo "Diagnostic check..."
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Home directory: $HOME"
          
          # Define project directory
          PROJECT_DIR="$HOME/bi_telegram_bot"
          
          # Check if project directory exists
          if [ ! -d "$PROJECT_DIR" ]; then
            echo "Project directory not found, creating it..."
            mkdir -p "$PROJECT_DIR"
            cd "$PROJECT_DIR"
            git clone https://github.com/Yerassyl20036/bi_telegram_bot.git .
          else
            cd "$PROJECT_DIR"
          fi
          
          echo "Now in directory: $(pwd)"
          
          # Check Docker
          echo "Checking Docker..."
          docker --version
          docker-compose --version
          
          echo "Starting deployment..."
          
          # Stop existing services using systemd if available
          if command -v systemctl >/dev/null 2>&1; then
            echo "Stopping services using systemd..."
            sudo systemctl stop telegram-bot.service 2>/dev/null || true
            sudo systemctl stop photo-server.service 2>/dev/null || true
          else
            echo "Stopping services using pkill..."
            pkill -f "python.*main.py" 2>/dev/null || true
            pkill -f "python.*photo_server.py" 2>/dev/null || true
            sleep 2
          fi
          
          # Pull latest changes
          echo "Updating code..."
          git fetch origin
          git reset --hard origin/main
          
          # Setup environment
          echo "Environment setup..."
          if [ -f ".env.vps" ]; then
            cp .env.vps .env
            echo "Copied .env.vps to .env"
          else
            echo "No .env.vps found, using existing .env if available"
          fi
          
          # Start Docker services
          echo "Starting Docker services..."
          docker-compose down --timeout 5 2>/dev/null || true
          docker-compose up -d
          
          # Install dependencies
          echo "Installing dependencies..."
          python3 -m pip install --user -q -r requirements.txt
          
          # Start Python services using systemd if available
          if command -v systemctl >/dev/null 2>&1; then
            echo "Setting up systemd services..."
            
            # Create telegram bot service
            sudo tee /etc/systemd/system/telegram-bot.service > /dev/null <<EOF
[Unit]
Description=Telegram Bot Service
After=network.target

[Service]
User=$USER
WorkingDirectory=$PROJECT_DIR
ExecStart=/usr/bin/python3 $PROJECT_DIR/main.py
Restart=always
Environment=PYTHONUNBUFFERED=1

[Install]
WantedBy=multi-user.target
EOF
            
            # Create photo server service
            sudo tee /etc/systemd/system/photo-server.service > /dev/null <<EOF
[Unit]
Description=Photo Server Service
After=network.target

[Service]
User=$USER
WorkingDirectory=$PROJECT_DIR
ExecStart=/usr/bin/python3 $PROJECT_DIR/photo_server.py
Restart=always
Environment=PYTHONUNBUFFERED=1

[Install]
WantedBy=multi-user.target
EOF
            
            # Reload systemd and start services
            sudo systemctl daemon-reload
            sudo systemctl enable telegram-bot.service photo-server.service
            sudo systemctl start telegram-bot.service photo-server.service
            
            echo "Services started using systemd"
          else
            echo "Starting services using nohup..."
            nohup python3 photo_server.py > photo_server.log 2>&1 &
            nohup python3 main.py > bot.log 2>&1 &
            echo "Services started using nohup"
          fi
          
          echo "Deployment completed successfully!"
          echo "Timestamp: $(date)"