name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build:
    needs: lint
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Python (for any build steps if needed)
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      # 3. Build Docker image for main bot
      - name: Build Docker image for main bot
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/bi-telegram-bot:latest -f Dockerfile.bot .

      # 4. Build Docker image for photo server
      - name: Build Docker image for photo server
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/bi-photo-server:latest -f Dockerfile.photo .

      # 5. Login to Docker Hub
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      # 6. Push Docker images
      - name: Push main bot Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/bi-telegram-bot:latest

      - name: Push photo server Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/bi-photo-server:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      # Deploy to VPS via SSH
      - name: SSH Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          timeout: 30s
          command_timeout: 10m
          script: |
            echo "🔌 SSH Connection: ✅ SUCCESSFUL"
            
            # Navigate to project directory
            if cd ~/bi_telegram_bot; then
              echo "📁 Project Directory: ✅ FOUND"
            else
              echo "📁 Project Directory: ❌ FAILED"
              exit 1
            fi
            
            # Login to Docker Hub
            echo "🔐 Logging into Docker Hub..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
            if [ $? -eq 0 ]; then
              echo "🔐 Docker Login: ✅ SUCCESS"
            else
              echo "🔐 Docker Login: ❌ FAILED"
              exit 1
            fi
            
            # Stop ALL existing processes and containers
            echo "⏹️ Stopping ALL existing services..."
            
            # Kill any existing Python processes (to avoid bot token conflicts)
            echo "🔪 Killing existing Python processes..."
            pkill -f "python.*main.py" || echo "No main.py processes found"
            pkill -f "python.*photo_server.py" || echo "No photo_server.py processes found"
            pkill -f "python3.*main.py" || echo "No python3 main.py processes found"
            pkill -f "python3.*photo_server.py" || echo "No python3 photo_server.py processes found"
            
            # Stop and remove all existing containers
            echo "🐳 Stopping Docker containers..."
            docker-compose down --timeout 10 || echo "No docker-compose containers running"
            docker stop $(docker ps -aq) 2>/dev/null || echo "No containers to stop"
            docker rm $(docker ps -aq) 2>/dev/null || echo "No containers to remove"
            
            # Clean up Docker images and networks
            echo "🧹 Cleaning up Docker..."
            docker system prune -f || true
            
            # Pull latest code changes
            echo "📥 Pulling latest code..."
            git fetch origin && git reset --hard origin/main
            
            # Pull latest images from Docker Hub
            echo "📥 Pulling latest Docker images..."
            if docker pull ${{ secrets.DOCKER_USERNAME }}/bi-telegram-bot:latest; then
              echo "🤖 Main Bot Image: ✅ PULLED"
            else
              echo "🤖 Main Bot Image: ❌ FAILED"
              exit 1
            fi
            
            if docker pull ${{ secrets.DOCKER_USERNAME }}/bi-photo-server:latest; then
              echo "📸 Photo Server Image: ✅ PULLED"
            else
              echo "📸 Photo Server Image: ❌ FAILED"
              exit 1
            fi
            
            # Tag images for local use
            echo "🏷️ Tagging images for local use..."
            docker tag ${{ secrets.DOCKER_USERNAME }}/bi-telegram-bot:latest bi-telegram-bot:latest
            docker tag ${{ secrets.DOCKER_USERNAME }}/bi-photo-server:latest bi-photo-server:latest
            
            # Update environment file and set Docker username
            echo "🔧 Setting up environment..."
            [ -f ".env.vps" ] && cp .env.vps .env || echo "⚠️ Using existing .env"
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
            
            # Start only PostgreSQL first
            echo "�️ Starting PostgreSQL..."
            if docker-compose up -d postgres; then
              echo "�️ PostgreSQL: ✅ STARTED"
              
              # Wait for database to be ready
              echo "⏳ Waiting for database to be ready..."
              for i in {1..30}; do
                if docker exec power_bi_postgres pg_isready -U bot_user -d power_bi_bot; then
                  echo "🗄️ Database: ✅ READY"
                  break
                fi
                echo "Waiting for database... ($i/30)"
                sleep 2
              done
              
              # Check if database is really ready
              if ! docker exec power_bi_postgres pg_isready -U bot_user -d power_bi_bot; then
                echo "🗄️ Database: ❌ NOT READY AFTER 60s"
                exit 1
              fi
              
            else
              echo "🗄️ PostgreSQL: ❌ FAILED TO START"
              exit 1
            fi
            
            # Start Grafana
            echo "📊 Starting Grafana..."
            docker-compose up -d grafana
            
            # Start Telegram Bot
            echo "🤖 Starting Telegram bot..."
            if docker-compose up -d telegram-bot; then
              echo "🤖 Bot Service: ✅ LAUNCHED"
              
              # Wait and check if bot container is running
              sleep 10
              if docker ps | grep -q "bi-telegram-bot"; then
                echo "🤖 Main Bot Container: ✅ RUNNING"
              else
                echo "🤖 Main Bot Container: ❌ NOT RUNNING"
                echo "Bot logs:"
                docker logs bi-telegram-bot 2>&1 || echo "No logs available"
                exit 1
              fi
            else
              echo "🤖 Bot Service: ❌ FAILED TO START"
              exit 1
            fi
            
            # Start Photo Server
            echo "📸 Starting photo server..."
            if docker-compose up -d photo-server; then
              echo "📸 Photo Service: ✅ LAUNCHED"
              
              # Wait and check if photo server container is running
              sleep 5
              if docker ps | grep -q "bi-photo-server"; then
                echo "📸 Photo Server Container: ✅ RUNNING"
              else
                echo "📸 Photo Server Container: ❌ NOT RUNNING"
                echo "Photo server logs:"
                docker logs bi-photo-server 2>&1 || echo "No logs available"
                exit 1
              fi
            else
              echo "📸 Photo Service: ❌ FAILED TO START"
              exit 1
            fi
              
            else
              echo "🐳 Docker Services: ❌ FAILED"
              exit 1
            fi
            
            echo "🎉 DEPLOYMENT COMPLETED SUCCESSFULLY!"
            echo "All services are running in Docker containers."
            
            # Show running containers
            echo "📊 Container Status:"
            docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "(postgres|bot|photo)" || true
