name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  DOCKER_REGISTRY: docker.io
  BOT_IMAGE_NAME: bi-telegram-bot
  PHOTO_IMAGE_NAME: bi-photo-server

jobs:
  lint:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push bot image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.bot
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.BOT_IMAGE_NAME }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.BOT_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push photo server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.photo
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.PHOTO_IMAGE_NAME }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.PHOTO_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          timeout: 60s
          command_timeout: 15m
          script: |
            echo "üöÄ Starting deployment process..."
            echo "Deployment triggered by commit: ${{ github.sha }}"
            
            # Set up variables
            export PROJECT_DIR="$HOME/bi_telegram_bot"
            export DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
            export BOT_IMAGE="${DOCKER_USERNAME}/bi-telegram-bot:latest"
            export PHOTO_IMAGE="${DOCKER_USERNAME}/bi-photo-server:latest"
            
            # Navigate to project directory
            echo "üìÅ Navigating to project directory..."
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "‚ùå Project directory not found. Setting up..."
              mkdir -p "$PROJECT_DIR"
              cd "$PROJECT_DIR"
              git clone https://github.com/${{ github.repository }} .
            else
              cd "$PROJECT_DIR"
              echo "‚úÖ Found project directory"
            fi
            
            # Stop existing services gracefully
            echo "‚èπÔ∏è  Stopping existing services..."
            docker-compose down --timeout 30 2>/dev/null || true
            
            # Clean up any orphaned processes
            pkill -f "python.*main.py" 2>/dev/null || true
            pkill -f "python.*photo_server.py" 2>/dev/null || true
            
            # Clean up Docker resources
            echo "üßπ Cleaning up Docker resources..."
            docker container prune -f || true
            docker image prune -f || true
            docker network prune -f || true
            
            # Login to Docker Hub
            echo "üîê Logging into Docker Hub..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            if [ $? -ne 0 ]; then
              echo "‚ùå Docker login failed"
              exit 1
            fi
            
            # Pull latest code
            echo "üì• Pulling latest code..."
            git fetch origin
            git reset --hard origin/main
            
            # Pull latest Docker images
            echo "üì• Pulling Docker images..."
            docker pull "$BOT_IMAGE"
            docker pull "$PHOTO_IMAGE"
            
            # Set up environment
            echo "üîß Setting up environment..."
            if [ -f ".env.vps" ]; then
              cp .env.vps .env
              echo "‚úÖ Copied VPS environment configuration"
            fi
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
            
            # Create necessary directories
            mkdir -p photos
            
            # Start services with health checks
            echo "üê≥ Starting services..."
            docker-compose up -d --wait
            
            # Verify all services are running
            echo "üîç Verifying service health..."
            sleep 30
            
            # Check PostgreSQL
            if ! docker exec power_bi_postgres pg_isready -U bot_user -d power_bi_bot; then
              echo "‚ùå PostgreSQL health check failed"
              docker logs power_bi_postgres
              exit 1
            fi
            echo "‚úÖ PostgreSQL is healthy"
            
            # Check Telegram Bot
            if ! docker ps | grep -q "bi-telegram-bot.*Up"; then
              echo "‚ùå Telegram Bot container not running"
              docker logs bi-telegram-bot
              exit 1
            fi
            echo "‚úÖ Telegram Bot is running"
            
            # Check Photo Server
            if ! docker ps | grep -q "bi-photo-server.*Up"; then
              echo "‚ùå Photo Server container not running"
              docker logs bi-photo-server
              exit 1
            fi
            echo "‚úÖ Photo Server is running"
            
            # Final verification
            echo "üìä Final service status:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            echo "üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!"
            echo "üåê Services available at:"
            echo "   - Grafana: http://$(hostname -I | awk '{print $1}'):3000"
            echo "   - Photo Server: http://$(hostname -I | awk '{print $1}'):8080"
            echo "   - PostgreSQL: $(hostname -I | awk '{print $1}'):5432"
