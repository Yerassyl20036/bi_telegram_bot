name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: üî® Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
    
    - name: üêç Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: ‚úÖ Validate Python Files
      run: |
        python -c "import py_compile; py_compile.compile('main.py', doraise=True)"
        python -c "import py_compile; py_compile.compile('photo_server.py', doraise=True)"
        python -c "import py_compile; py_compile.compile('excel_to_postgres.py', doraise=True)"
        echo "‚úÖ All Python files are valid"
    
    - name: üê≥ Validate Docker Compose
      run: |
        docker-compose config
        echo "‚úÖ Docker Compose configuration is valid"

  deploy:
    name: üöÄ Deploy to VPS
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
    
    - name: üîê Setup SSH Connection
      env:
        SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_PORT: ${{ secrets.VPS_PORT }}
        VPS_USER: ${{ secrets.VPS_USERNAME }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -p $VPS_PORT $VPS_HOST >> ~/.ssh/known_hosts
        echo "‚úÖ SSH setup completed"
    
    - name: üß™ Test SSH Connection
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_PORT: ${{ secrets.VPS_PORT }}
        VPS_USER: ${{ secrets.VPS_USERNAME }}
      run: |
        ssh -i ~/.ssh/id_rsa -p $VPS_PORT $VPS_USER@$VPS_HOST "echo 'SSH connection successful'"
    
    - name: üìÅ Prepare VPS Environment
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_PORT: ${{ secrets.VPS_PORT }}
        VPS_USER: ${{ secrets.VPS_USERNAME }}
      run: |
        ssh -i ~/.ssh/id_rsa -p $VPS_PORT $VPS_USER@$VPS_HOST << 'EOF'
          # Create project directories
          mkdir -p ~/bi_telegram_bot/{backups,photos,logs}
          
          # Stop existing services
          cd ~/bi_telegram_bot 2>/dev/null || exit 0
          docker-compose down 2>/dev/null || true
          pkill -f 'python.*main.py' 2>/dev/null || true
          pkill -f 'python.*photo_server.py' 2>/dev/null || true
          
          echo "‚úÖ VPS environment prepared"
        EOF
    
    - name: üì§ Deploy Files to VPS
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_PORT: ${{ secrets.VPS_PORT }}
        VPS_USER: ${{ secrets.VPS_USERNAME }}
      run: |
        rsync -avz --delete \
          -e "ssh -i ~/.ssh/id_rsa -p $VPS_PORT" \
          --exclude='.git' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.env' \
          --exclude='backups/' \
          --exclude='photos/' \
          --exclude='.github' \
          ./ $VPS_USER@$VPS_HOST:~/bi_telegram_bot/
        echo "‚úÖ Files deployed successfully"
    
    - name: üîß Setup VPS Environment
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_PORT: ${{ secrets.VPS_PORT }}
        VPS_USER: ${{ secrets.VPS_USERNAME }}
      run: |
        ssh -i ~/.ssh/id_rsa -p $VPS_PORT $VPS_USER@$VPS_HOST << 'EOF'
          cd ~/bi_telegram_bot
          
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            systemctl enable docker
            systemctl start docker
          fi
          
          # Install Docker Compose if not present
          if ! command -v docker-compose &> /dev/null; then
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          fi
          
          # Install Python and dependencies
          apt update -qq
          apt install -y python3 python3-pip python3-venv
          
          # Create virtual environment and install dependencies
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Make scripts executable
          chmod +x *.sh 2>/dev/null || true
          
          echo "‚úÖ Environment setup completed"
        EOF
    
    - name: ‚öôÔ∏è Create Environment Configuration
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_PORT: ${{ secrets.VPS_PORT }}
        VPS_USER: ${{ secrets.VPS_USERNAME }}
      run: |
        ssh -i ~/.ssh/id_rsa -p $VPS_PORT $VPS_USER@$VPS_HOST << 'EOF'
          cd ~/bi_telegram_bot
          
          if [ ! -f .env ]; then
            cat > .env << 'ENVEOF'
# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN=your_bot_token_here

# Database Configuration
DATABASE_URL=postgresql://bot_user:bot_password@localhost:5432/power_bi_bot
DATABASE_HOST=localhost
DATABASE_PORT=5432
DATABASE_NAME=power_bi_bot
DATABASE_USER=bot_user
DATABASE_PASSWORD=bot_password

# Table prefix
TABLE_PREFIX=edu_

# Photo Configuration
PHOTO_DIR=/root/bi_telegram_bot/photos
PHOTO_URL_BASE=http://localhost:8080/photos
PHOTO_SERVER_PORT=8080
MAX_PHOTO_SIZE=10485760
ENVEOF
            echo "‚ö†Ô∏è  Created default .env file - please update with your credentials"
          fi
          
          echo "‚úÖ Configuration ready"
        EOF
    
    - name: üöÄ Start Services
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_PORT: ${{ secrets.VPS_PORT }}
        VPS_USER: ${{ secrets.VPS_USERNAME }}
      run: |
        ssh -i ~/.ssh/id_rsa -p $VPS_PORT $VPS_USER@$VPS_HOST << 'EOF'
          cd ~/bi_telegram_bot
          
          # Start Docker services
          docker-compose up -d
          sleep 30  # Wait for database to start
          
          # Start Python applications
          source venv/bin/activate
          
          # Start photo server
          nohup python photo_server.py > logs/photo_server.log 2>&1 &
          echo $! > photo_server.pid
          
          sleep 5
          
          # Start main bot
          nohup python main.py > logs/bot.log 2>&1 &
          echo $! > bot.pid
          
          echo "‚úÖ All services started"
        EOF
    
    - name: üè• Health Check
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_PORT: ${{ secrets.VPS_PORT }}
        VPS_USER: ${{ secrets.VPS_USERNAME }}
      run: |
        ssh -i ~/.ssh/id_rsa -p $VPS_PORT $VPS_USER@$VPS_HOST << 'EOF'
          cd ~/bi_telegram_bot
          
          echo "üìä Service Status:"
          docker-compose ps
          
          echo "üêç Python Processes:"
          ps aux | grep -E "(main\.py|photo_server\.py)" | grep -v grep || echo "No Python processes found"
          
          echo "üîå Port Status:"
          netstat -tlnp | grep -E ":(5432|3000|8080)" || echo "Ports may still be starting"
          
          echo "‚úÖ Health check completed"
        EOF
    
    - name: üßπ Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa

  notify:
    name: üì¢ Notify Status
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    
    steps:
    - name: ‚úÖ Success Notification
      if: needs.deploy.result == 'success'
      run: |
        echo "üéâ Deployment Successful!"
        echo "ü§ñ Telegram bot is running"
        echo "üìä Grafana: http://${{ secrets.VPS_HOST }}"
        echo "üì∏ Photos: http://${{ secrets.VPS_HOST }}:8080"
    
    - name: ‚ùå Failure Notification
      if: needs.deploy.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "üí• Deployment Failed!"
        echo "Check the logs above for details"
        exit 1
