name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  DOCKER_REGISTRY: docker.io
  BOT_IMAGE_NAME: bi-telegram-bot
  PHOTO_IMAGE_NAME: bi-photo-server

jobs:
  lint:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push bot image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.bot
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.BOT_IMAGE_NAME }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.BOT_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push photo server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.photo
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.PHOTO_IMAGE_NAME }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.PHOTO_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          timeout: 300s
          command_timeout: 30m
          script: |
            #!/bin/bash
            
            # Function to handle exit codes properly
            handle_exit_code() {
              local exit_code=$1
              local operation=$2
              if [ $exit_code -eq 0 ]; then
                echo "‚úÖ $operation: SUCCESS"
                return 0
              elif [ $exit_code -eq 143 ]; then
                echo "‚úÖ $operation: SUCCESS (SIGTERM - normal termination)"
                return 0
              else
                echo "‚ùå $operation: FAILED (exit code: $exit_code)"
                return $exit_code
              fi
            }
            
            echo "üöÄ Starting deployment process..."
            echo "Deployment triggered by commit: ${{ github.sha }}"
            
            # Set up variables
            export PROJECT_DIR="$HOME/bi_telegram_bot"
            export DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
            export BOT_IMAGE="${DOCKER_USERNAME}/bi-telegram-bot:latest"
            export PHOTO_IMAGE="${DOCKER_USERNAME}/bi-photo-server:latest"
            
            # Navigate to project directory
            echo "üìÅ Navigating to project directory..."
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "‚ùå Project directory not found. Setting up..."
              mkdir -p "$PROJECT_DIR"
              cd "$PROJECT_DIR"
              git clone https://github.com/${{ github.repository }} .
            else
              cd "$PROJECT_DIR"
              echo "‚úÖ Found project directory"
            fi
            
            # Stop existing services gracefully
            echo "‚èπÔ∏è Stopping existing services..."
            
            # Kill Python processes
            echo "üî™ Stopping Python processes..."
            pkill -f "python.*main.py" 2>/dev/null
            handle_exit_code $? "Stop main.py processes"
            
            pkill -f "python.*photo_server.py" 2>/dev/null
            handle_exit_code $? "Stop photo_server.py processes"
            
            # Stop Docker containers
            if [ -f "docker-compose.yml" ]; then
              echo "üê≥ Stopping Docker containers..."
              docker-compose down --timeout 30 2>/dev/null
              handle_exit_code $? "Stop Docker containers"
            fi
            
            # Clean up Docker resources
            echo "üßπ Cleaning up Docker resources..."
            docker container prune -f 2>/dev/null || true
            docker image prune -f --filter "until=24h" 2>/dev/null || true
            
            # Login to Docker Hub
            echo "üîê Logging into Docker Hub..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            if [ $? -ne 0 ]; then
              echo "‚ùå Docker login failed"
              exit 1
            fi
            echo "‚úÖ Docker login successful"
            
            # Pull latest code
            echo "üì• Pulling latest code..."
            git fetch origin
            git reset --hard origin/main
            if [ $? -ne 0 ]; then
              echo "‚ùå Failed to update code"
              exit 1
            fi
            echo "‚úÖ Code updated successfully"
            
            # Pull latest Docker images
            echo "üì• Pulling Docker images..."
            docker pull "$BOT_IMAGE"
            if [ $? -ne 0 ]; then
              echo "‚ùå Failed to pull bot image"
              exit 1
            fi
            echo "‚úÖ Bot image pulled successfully"
            
            docker pull "$PHOTO_IMAGE"
            if [ $? -ne 0 ]; then
              echo "‚ùå Failed to pull photo server image"
              exit 1
            fi
            echo "‚úÖ Photo server image pulled successfully"
            
            # Tag images for local use (fix naming mismatch)
            echo "üè∑Ô∏è Tagging images for local use..."
            docker tag "$BOT_IMAGE" bi-telegram-bot:latest
            docker tag "$PHOTO_IMAGE" bi-photo-server:latest
            echo "‚úÖ Images tagged successfully"
            
            # Set up environment
            echo "üîß Setting up environment..."
            if [ -f ".env.vps" ]; then
              cp .env.vps .env
              echo "‚úÖ Copied VPS environment configuration"
            else
              echo "‚ö†Ô∏è No .env.vps found, using existing .env"
            fi
            
            # Ensure required directories exist
            mkdir -p photos
            
            # Verify docker-compose.yml exists and is valid
            if [ ! -f "docker-compose.yml" ]; then
              echo "‚ùå docker-compose.yml not found"
              exit 1
            fi
            
            echo "üìÑ Validating docker-compose.yml..."
            docker-compose config
            if [ $? -ne 0 ]; then
              echo "‚ùå docker-compose.yml is invalid"
              exit 1
            fi
            echo "‚úÖ docker-compose.yml is valid"
            
            # Start services step by step
            echo "üê≥ Starting services..."
            
            # Start PostgreSQL first
            echo "üóÑÔ∏è Starting PostgreSQL..."
            docker-compose up -d postgres
            if [ $? -ne 0 ]; then
              echo "‚ùå Failed to start PostgreSQL"
              exit 1
            fi
            echo "‚úÖ PostgreSQL container started"
            
            # Wait for PostgreSQL to be ready
            echo "‚è≥ Waiting for PostgreSQL to be ready..."
            POSTGRES_READY=false
            for i in {1..30}; do
              if docker exec power_bi_postgres pg_isready -U bot_user -d power_bi_bot 2>/dev/null; then
                echo "‚úÖ PostgreSQL is ready"
                POSTGRES_READY=true
                break
              fi
              echo "Waiting for PostgreSQL... ($i/30)"
              sleep 2
            done
            
            if [ "$POSTGRES_READY" != "true" ]; then
              echo "‚ùå PostgreSQL failed to become ready"
              echo "PostgreSQL logs:"
              docker logs power_bi_postgres --tail 20
              exit 1
            fi
            
            # Start Telegram Bot
            echo "ü§ñ Starting Telegram Bot..."
            docker-compose up -d telegram-bot
            if [ $? -ne 0 ]; then
              echo "‚ùå Failed to start Telegram Bot"
              docker-compose logs telegram-bot
              exit 1
            fi
            echo "‚úÖ Telegram Bot container started"
            
            # Wait for bot to be ready
            sleep 10
            if ! docker ps --filter "name=bi-telegram-bot" --filter "status=running" --quiet | grep -q .; then
              echo "‚ùå Telegram bot container is not running"
              echo "Bot logs:"
              docker logs bi-telegram-bot --tail 20
              exit 1
            fi
            echo "‚úÖ Telegram Bot is running"
            
            # Start Photo Server
            echo "üì∏ Starting Photo Server..."
            docker-compose up -d photo-server
            if [ $? -ne 0 ]; then
              echo "‚ùå Failed to start Photo Server"
              docker-compose logs photo-server
              exit 1
            fi
            echo "‚úÖ Photo Server container started"
            
            # Wait for photo server to be ready
            sleep 10
            if ! docker ps --filter "name=bi-photo-server" --filter "status=running" --quiet | grep -q .; then
              echo "‚ùå Photo server container is not running"
              echo "Photo server logs:"
              docker logs bi-photo-server --tail 20
              exit 1
            fi
            echo "‚úÖ Photo Server is running"
            
            # Start Grafana
            echo "üìä Starting Grafana..."
            docker-compose up -d grafana
            if [ $? -ne 0 ]; then
              echo "‚ùå Failed to start Grafana"
              docker-compose logs grafana
              exit 1
            fi
            echo "‚úÖ Grafana container started"
            
            # Final verification
            echo "üîç Final health checks..."
            sleep 15
            
            # Check all containers
            echo "üìä Container status:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # Count running containers
            RUNNING_CONTAINERS=$(docker ps --filter "status=running" --format "{{.Names}}" | grep -E "power_bi_postgres|bi-telegram-bot|bi-photo-server|power_bi_grafana" | wc -l)
            echo "üìä Running containers: $RUNNING_CONTAINERS/4"
            
            if [ "$RUNNING_CONTAINERS" -lt 4 ]; then
              echo "‚ùå Not all containers are running"
              echo "üîç Checking container logs..."
              docker-compose logs --tail 10
              exit 1
            fi
            
            echo "üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!"
            echo "‚úÖ All $RUNNING_CONTAINERS containers are running"
            echo ""
            echo "üåê Services available at:"
            echo "   - Grafana: http://$(hostname -I | awk '{print $1}'):3000"
            echo "   - Photo Server: http://$(hostname -I | awk '{print $1}'):8080"
            echo "   - PostgreSQL: $(hostname -I | awk '{print $1}'):5432"
