name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  deploy:
    needs: lint
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        timeout: 30s
        command_timeout: 10m
        script: |
          echo "🔌 SSH Connection: ✅ SUCCESSFUL"
          
          # Navigate to project directory
          if cd ~/bi_telegram_bot; then
            echo "📁 Project Directory: ✅ FOUND"
          else
            echo "📁 Project Directory: ❌ FAILED"
            exit 1
          fi
          
          # Stop existing services with better error handling
          echo "⏹️ Stopping existing services..."
          
          # Stop Python processes
          if pkill -f "python.*main.py"; then
            echo "🤖 Stopped main.py: ✅"
          else
            echo "🤖 No main.py running: ✅"
          fi
          
          if pkill -f "python.*photo_server.py"; then
            echo "📸 Stopped photo_server.py: ✅"
          else
            echo "📸 No photo_server.py running: ✅"
          fi
          
          # Stop Docker with sudo and shorter timeout
          echo "🐳 Stopping Docker containers..."
          if sudo docker-compose down --timeout 5; then
            echo "🐳 Docker Stop: ✅ SUCCESS"
          else
            echo "🐳 Docker Stop: ⚠️ FAILED (continuing anyway)"
          fi
          
          # Pull latest changes
          echo "📥 Pulling latest changes..."
          if git fetch origin && git reset --hard origin/main; then
            echo "📥 Git Update: ✅ SUCCESS"
          else
            echo "📥 Git Update: ❌ FAILED"
            exit 1
          fi
          
          # Setup environment
          [ -f ".env.vps" ] && cp .env.vps .env || echo "⚠️ Using existing .env"
          
          # Start Docker services with sudo
          echo "🐳 Starting Docker services..."
          if sudo docker-compose up -d; then
            echo "🐳 Docker Services: ✅ STARTED"
            
            # Wait and check database
            echo "⏳ Waiting for database..."
            sleep 15
            if sudo docker exec power_bi_postgres pg_isready -U bot_user -d power_bi_bot; then
              echo "🗄️ Database: ✅ READY"
            else
              echo "🗄️ Database: ❌ NOT READY"
              exit 1
            fi
          else
            echo "🐳 Docker Services: ❌ FAILED"
            exit 1
          fi
          
          # Install dependencies
          echo "📦 Installing dependencies..."
          python3 -m pip install --user --no-warn-script-location -r requirements.txt
          
          # Start main.py
          echo "🤖 Starting Telegram bot..."
          nohup python3 main.py > bot.log 2>&1 &
          sleep 5
          if pgrep -f "python.*main.py" >/dev/null; then
            echo "🤖 Main Bot: ✅ LAUNCHED"
          else
            echo "🤖 Main Bot: ❌ FAILED TO START"
            exit 1
          fi
          
          # Start photo_server.py
          echo "📸 Starting photo server..."
          nohup python3 photo_server.py > photo_server.log 2>&1 &
          sleep 3
          if pgrep -f "python.*photo_server.py" >/dev/null; then
            echo "📸 Photo Server: ✅ LAUNCHED"
          else
            echo "📸 Photo Server: ❌ FAILED TO START"
            exit 1
          fi
          
          echo "🎉 DEPLOYMENT COMPLETED SUCCESSFULLY!"
          echo "All services are running correctly."
