name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  deploy:
    needs: lint
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        timeout: 30s
        command_timeout: 10m
        script: |
          set -e
          
          echo "🚀 Starting deployment..."
          
          # Navigate to project directory
          cd ~/bi_telegram_bot || { echo "❌ Project directory not found"; exit 1; }
          
          # Stop existing services gracefully
          echo "⏹️ Stopping existing services..."
          pkill -f "python.*main.py" || true
          pkill -f "python.*photo_server.py" || true
          
          # Stop Docker containers quickly
          docker-compose down --timeout 10 || true
          
          # Pull latest changes
          echo "📥 Pulling latest changes..."
          git fetch origin
          git reset --hard origin/main
          
          # Copy VPS environment file
          echo "🔧 Setting up environment..."
          [ -f ".env.vps" ] && cp .env.vps .env || echo "⚠️ Using existing .env"
          
          # Start Docker services
          echo "🐳 Starting Docker services..."
          docker-compose up -d
          
          # Quick database check (don't wait too long)
          echo "⏳ Checking database..."
          sleep 10
          docker exec power_bi_postgres pg_isready -U bot_user -d power_bi_bot || echo "⚠️ Database not ready yet, continuing..."
          
          # Install Python dependencies (use cache when possible)
          echo "📦 Installing Python dependencies..."
          python3 -m pip install --user --no-warn-script-location -r requirements.txt
          
          # Start services
          echo "📸 Starting photo server..."
          nohup python3 photo_server.py > photo_server.log 2>&1 &
          
          echo "🤖 Starting Telegram bot..."
          nohup python3 main.py > bot.log 2>&1 &
          
          # Quick verification
          sleep 3
          echo "✅ Deployment completed!"
          
          # Show status
          docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "(postgres|grafana)" || true
          echo "Services: Bot=$(pgrep -f "python.*main.py" >/dev/null && echo "✅" || echo "❌") Photo=$(pgrep -f "python.*photo_server.py" >/dev/null && echo "✅" || echo "❌")"
