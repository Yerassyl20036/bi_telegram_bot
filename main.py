import os
import json
import asyncio
import hashlib
import uuid
import aiofiles
from datetime import datetime, timezone, timedelta
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import psycopg2
from psycopg2 import sql
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
DATABASE_HOST = os.getenv("DATABASE_HOST", "localhost")
DATABASE_PORT = int(os.getenv("DATABASE_PORT", "5432"))
DATABASE_NAME = os.getenv("DATABASE_NAME", "power_bi_bot")
DATABASE_USER = os.getenv("DATABASE_USER", "bot_user")
DATABASE_PASSWORD = os.getenv("DATABASE_PASSWORD", "bot_password")
PREFIX = os.getenv("TABLE_PREFIX", "edu_")

# Photo configuration
PHOTO_DIR = os.getenv("PHOTO_DIR", "/tmp/photos")
PHOTO_URL_BASE = os.getenv("PHOTO_URL_BASE", "http://localhost:8080/photos")
MAX_PHOTO_SIZE = int(os.getenv("MAX_PHOTO_SIZE", str(10 * 1024 * 1024)))  # 10MB


# ==========================
# SETTINGS
# ==========================
if not TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN env var is required")

if not DATABASE_URL:
    raise RuntimeError("DATABASE_URL env var is required")

# Default table mapping for different survey blocks
DEFAULT_TABLE_MAP = {
    # Safety/Cleanliness/Tech/Health S1..S8
    "S1": "s1",
    "S2": "s2", 
    "S3": "s3",
    "S4": "s4",
    "S5": "s5",
    "S6": "s6",
    "S7": "s7",
    "S8": "s8",
    # Study/Quality Q1..Q5
    "Q1": "q1",
    "Q2": "q2",
    "Q3": "q3",
    "Q4": "q4",
    "Q5": "q5",
    # People P1..P3
    "P1": "p1",
    "P2": "p2",
    "P3": "p3",
}

TABLE_MAP = DEFAULT_TABLE_MAP

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# ==========================
# Database helpers
# ==========================
def get_db_connection():
    """Create a database connection."""
    try:
        conn = psycopg2.connect(DATABASE_URL)
        return conn
    except psycopg2.Error as e:
        print(f"Database connection error: {e}")
        raise


def test_db_connection():
    """Test database connection and log result."""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT 1;")
        result = cursor.fetchone()
        cursor.close()
        conn.close()
        print("‚úÖ Database connection successful!")
        return True
    except Exception as e:
        print(f"‚ùå Database connection failed: {e}")
        return False


def postgres_create(table_name: str, payload: dict) -> int:
    """Insert data into PostgreSQL table and return the ID."""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        # Build the INSERT query dynamically
        columns = list(payload.keys())
        values = list(payload.values())
        
        # Create the SQL query
        insert_query = sql.SQL(
            "INSERT INTO dbo.{table} ({columns}) VALUES ({values}) RETURNING id"
        ).format(
            table=sql.Identifier(table_name),
            columns=sql.SQL(', ').join(map(sql.Identifier, columns)),
            values=sql.SQL(', ').join(sql.Placeholder() * len(values))
        )
        
        # Execute the query
        cursor.execute(insert_query, values)
        record_id = cursor.fetchone()[0]
        
        # Commit the transaction
        conn.commit()
        
        print(f"‚úÖ Record saved to {table_name} with ID: {record_id}")
        return record_id
        
    except psycopg2.Error as e:
        conn.rollback()
        raise RuntimeError(f"Database insert failed: {e}")
    finally:
        cursor.close()
        conn.close()

# ==========================
# Column name helper
# ==========================
def dv(header: str) -> str:
    """Derive Dataverse logical name from a human header using PREFIX."""
    snake = []
    for ch in header:
        if ch.isalnum():
            snake.append(ch.lower())
        elif ch in [" ", "-", "/"] or ch == "\n":
            snake.append("_")
        else:
            snake.append(ch.lower())
    s = "".join(snake)
    while "__" in s:
        s = s.replace("__", "_")
    return f"{PREFIX}{s.strip('_')}"

# ==========================
# Keyboards
# ==========================
def kb(options, row_size=3) -> ReplyKeyboardMarkup:
    rows = [options[i:i+row_size] for i in range(0, len(options), row_size)]
    keyboard = [[KeyboardButton(text=opt) for opt in row] for row in rows]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def schools_keyboard():
    schools = [
        "Binom school –∏–º. –ê. –ë–∞–π—Ç“±—Ä—Å—ã–Ω“±–ª—ã",
        "Binom School –∏–º. –ê. –ë”©–∫–µ–π—Ö–∞–Ω–∞",
        "Binom school –∏–º. –ê. –ö–µ–∫–∏–ª–±–∞–µ–≤–∞",
        "Binom school –∏–º. “ö. –°”ô—Ç–±–∞–µ–≤–∞",
        "Binom School –∏–º. “ö–∞–¥—ã—Ä –ú—ã—Ä–∑–∞ ”ò–ª—ñ",
        "Binom school –∏–º. –´. –ê–ª—Ç—ã–Ω—Å–∞—Ä–∏–Ω–∞",
        "Binom school –®–∫–æ–ª–∞-–ª–∏—Ü–µ–π –∏–º. –ê–ª—å-–§–∞—Ä–∞–±–∏",
        "Binom –®–∫–æ–ª–∞-–ª–∏—Ü–µ–π –∏–º. –î–∏–Ω–º—É—Ö–∞–º–º–µ–¥–∞ –ö—É–Ω–∞–µ–≤–∞",
        "Binom school –ê–≤–∞–Ω–≥–∞—Ä–¥",
        "Riviera International School",
        "FARABI SCHOOL SHYMKENT",
        "FARABI SCHOOL ATYRAU",
    ]
    return kb(schools, row_size=1)

def roles_keyboard():
    roles = [
        "üë®‚Äçüë©‚Äçüë¶ –ê—Ç–∞-–∞–Ω–∞ / –†–æ–¥–∏—Ç–µ–ª—å",
        "üßë‚Äçüéì –û“õ—É—à—ã / –£—á–µ–Ω–∏–∫",
        "üë®‚Äçüè´ “ö—ã–∑–º–µ—Ç–∫–µ—Ä / –°–æ—Ç—Ä—É–¥–Ω–∏–∫",
    ]
    return kb(roles, row_size=1)

def topics_keyboard():
    topics = [
        "üßΩ –¢–∞–∑–∞–ª—ã“õ / –ß–∏—Å—Ç–æ—Ç–∞ (–∫–ª–∞—Å—Ç–∞—Ä, –æ—Ä—Ç–∞“õ –æ—Ä—ã–Ω–¥–∞—Ä, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞)",
        "üçΩ –ê—Å—Ö–∞–Ω–∞ / –ü–∏—Ç–∞–Ω–∏–µ",
        "üîî –û“õ—É –ø—Ä–æ—Ü–µ—Å—ñ / –£—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å",
        "üë®‚Äçüë©‚Äçüë¶ “∞—Å—ã–Ω—ã—Å—Ç–∞—Ä –º–µ–Ω —à–∞“ì—ã–º–¥–∞—Ä / –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∂–∞–ª–æ–±—ã",
        "‚ö† “ö–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ / –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
        "üí° –ñ–∞“£–∞ –∏–¥–µ—è–ª–∞—Ä / –ù–æ–≤—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã",
        "üñ• –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∞“õ–∞—É / –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏",
        "üè• –î–µ–Ω—Å–∞—É–ª—ã“õ / –ó–¥–æ—Ä–æ–≤—å–µ",
        "üßë‚Äçüè´ –ú“±“ì–∞–ª—ñ–º–¥–µ—Ä–¥—ñ“£ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–≥—ñ / –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—á–∏—Ç–µ–ª–µ–π",
        "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è–ª—ã“õ “õ–æ–ª–¥–∞—É / –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    ]
    return kb(topics, row_size=1)

def floors_keyboard():
    return kb(["1","2","3","4","5"], row_size=5)

def class_numbers_keyboard():
    return kb([str(i) for i in range(1, 12)], row_size=6)

async def save_photo(bot: Bot, photo: types.PhotoSize) -> str:
    """Save photo to local storage and return URL"""
    try:
        # Create photo directory if it doesn't exist
        os.makedirs(PHOTO_DIR, exist_ok=True)
        print(f"üìÅ Photo directory: {PHOTO_DIR}")
        
        # Generate unique filename
        file_info = await bot.get_file(photo.file_id)
        print(f"üìÑ File info: {file_info.file_path}")
        
        file_extension = file_info.file_path.split('.')[-1] if '.' in file_info.file_path else 'jpg'
        unique_id = str(uuid.uuid4())
        filename = f"{unique_id}.{file_extension}"
        local_path = os.path.join(PHOTO_DIR, filename)
        print(f"üíæ Saving to: {local_path}")
        
        # Download the photo directly to file path
        await bot.download_file(file_info.file_path, local_path)
        
        print(f"‚úÖ Photo saved successfully: {filename}")
        
        # Return the URL
        photo_url = f"{PHOTO_URL_BASE}/{filename}"
        print(f"üåê Photo URL: {photo_url}")
        return photo_url
        
    except Exception as e:
        print(f"‚ùå Error saving photo: {e}")
        import traceback
        traceback.print_exc()
        return ""

def liter_keyboard():
    letters = ["–ê","”ò","–ë","–í","–ì","“í","–î","–ï","–Å","–ñ","–ó","–ò","–ô","–ö","“ö","–õ","–ú","–ù","“¢","–û","”®","–ü","–†","–°","–¢","–£","“∞","“Æ","–§","–•","“∫","–¶","–ß","–®","–©","–™","–´","–Ü","–¨","–≠","–Æ","–Ø"]
    return kb(letters, row_size=8)

# ==========================
# FSM states
# ==========================
class Survey(StatesGroup):
    school = State()
    role = State()
    topic = State()

    # Cleanliness
    clean_branch = State()
    clean_floor = State()
    clean_classroom = State()
    clean_specific_place = State()
    clean_problem_choice = State()
    clean_problem_text = State()
    clean_condition_3 = State()

    # Temperature
    temp_location = State()
    temp_floor = State()
    temp_specific_place = State()
    temp_condition_choice = State()

    # Food
    food_problem = State()

    # Study process
    study_class_number = State()
    study_liter = State()
    study_topic = State()
    schedule_problem = State()
    schedule_subject = State()
    schedule_date = State()
    subject = State()
    subject_problem = State()
    discipline_problem = State()
    discipline_student_name = State()

    # Complaints
    complaint_area = State()
    complaint_text = State()

    # Ideas
    idea_area = State()
    idea_effect = State()
    idea_description = State()
    idea_author = State()

    # Tech
    tech_issue = State()
    tech_room = State()

    # Safety
    security_category = State()
    security_incident_type = State()
    security_incident_desc = State()
    security_guard_issue = State()
    security_hazard_issue = State()

    # Health (S8)
    health_text = State()

    # Teachers availability (Q5)
    q5_total = State()
    q5_illnes = State()
    q5_flight = State()
    q5_individual = State()
    q5_cvalification = State()
    q5_other = State()

    # Psych support (P3)
    p3_category = State()
    p3_additional = State()

    # Other
    other_input = State()

    # Final
    extra_info = State()
    photo = State()
    need_callback = State()
    contact_info = State()

# ==========================
# Flow start
# ==========================

@router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        # "üëã –°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ! / –ü—Ä–∏–≤–µ—Ç!",
        "üìö –°—ñ–∑ “õ–∞–π –º–µ–∫—Ç–µ–ø—Ç–µ–Ω—Å—ñ–∑? / –ò–∑ –∫–∞–∫–æ–π –≤—ã —à–∫–æ–ª—ã?",
        reply_markup=schools_keyboard(),
    )
    await state.set_state(Survey.school)

@router.message(Survey.school)
async def got_school(message: types.Message, state: FSMContext):
    await state.update_data(school=message.text)
    await message.answer("üë§ –†”©–ª—ñ“£—ñ–∑–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=roles_keyboard())
    await state.set_state(Survey.role)

@router.message(Survey.role)
async def got_role(message: types.Message, state: FSMContext):
    await state.update_data(role=message.text)
    await message.answer("üìù –¢–∞“õ—ã—Ä—ã–ø—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=topics_keyboard())
    await state.set_state(Survey.topic)

# ==========================
# Branching by topic
# ==========================
@router.message(Survey.topic)
async def process_topic(message: types.Message, state: FSMContext):
    topic = message.text
    await state.update_data(topic=topic)

    if topic.startswith("üßΩ"):
        branches = [
            "üßπ –°—ã–Ω—ã–ø —Ç–∞–∑–∞–ª—ã“ì—ã / –ß–∏—Å—Ç–æ—Ç–∞ –∫–ª–∞—Å—Å–æ–≤",
            "üè¢ –û—Ä—Ç–∞“õ –æ—Ä—ã–Ω–¥–∞—Ä —Ç–∞–∑–∞–ª—ã“ì—ã / –ß–∏—Å—Ç–æ—Ç–∞ –º–µ—Å—Ç –æ–±—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–ª—ã“õ —Ä–µ–∂–∏–º / –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–∂–∏–º",
        ]
        await message.answer("üßΩ –¢–∞–∑–∞–ª—ã“õ –±–æ–π—ã–Ω—à–∞ –±–∞“ì—ã—Ç / –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —á–∏—Å—Ç–æ—Ç–µ:", reply_markup=kb(branches, row_size=1))
        await state.set_state(Survey.clean_branch)
        return

    if topic.startswith("üçΩ"):
        await message.answer("4Ô∏è‚É£ –ú”ô—Å–µ–ª–µ“£—ñ–∑–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (–ü–∏—Ç–∞–Ω–∏–µ):", reply_markup=kb(FOOD_OPTIONS, row_size=1))
        await state.set_state(Survey.food_problem)
        return

    if topic.startswith("üîî"):
        await message.answer("üè´ “ö–∞–π —Å—ã–Ω—ã–ø? / –ö–∞–∫–æ–π –∫–ª–∞—Å—Å?", reply_markup=class_numbers_keyboard())
        await state.set_state(Survey.study_class_number)
        return

    if topic.startswith("üë®‚Äçüë©‚Äçüë¶"):
        await message.answer("‚úç –°–∞–ª–∞ / –°—Ñ–µ—Ä–∞:", reply_markup=kb(COMPLAINT_AREAS, row_size=1))
        await state.set_state(Survey.complaint_area)
        return

    if topic.startswith("‚ö†"):
        await message.answer("4Ô∏è‚É£ “ö–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ –º”ô—Å–µ–ª–µ—Å—ñ:", reply_markup=kb(SECURITY_CATEGORIES, row_size=1))
        await state.set_state(Survey.security_category)
        return

    if topic.startswith("üí°"):
        await message.answer("4Ô∏è‚É£ –ò–¥–µ—è —Å–∞–ª–∞—Å—ã:", reply_markup=kb(IDEA_AREAS, row_size=1))
        await state.set_state(Survey.idea_area)
        return

    if topic.startswith("üñ•"):
        await message.answer("–ù–µ —ñ—Å—Ç–µ–º–µ–π —Ç“±—Ä? / –ß—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?", reply_markup=kb(TECH_OPTIONS, row_size=1))
        await state.set_state(Survey.tech_issue)
        return

    if topic.startswith("üè•"):
        await message.answer("üìù –î–µ–Ω—Å–∞—É–ª—ã“õ –º”ô—Å–µ–ª–µ—Å—ñ–Ω “õ—ã—Å“õ–∞—à–∞ —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑ / –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –ø—Ä–æ–±–ª–µ–º—É —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º ‚Äî ¬´–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç¬ª:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.health_text)
        return

    if topic.startswith("üßë‚Äçüè´"):
        await message.answer("üë• –ë–∞—Ä–ª—ã“ì—ã “õ–∞–Ω—à–∞ –º“±“ì–∞–ª—ñ–º? / –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —É—á–∏—Ç–µ–ª–µ–π? ‚Äî —á–∏—Å–ª–æ:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.q5_total)
        return

    if topic.startswith("üß†"):
        await message.answer("üß≠ –ë–∞“ì—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=kb(["Emotion","Conflict","Bulling","Teaching","Crisis","Consultation","Other"], row_size=2))
        await state.set_state(Survey.p3_category)
        return

    await message.answer("–¢—ñ–∑—ñ–º–Ω–µ–Ω —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

# -------------- CLEANLINESS --------------
CLASS_CLEAN_PROBLEMS = [
    "ü™ë –°—ã–Ω“ì–∞–Ω –∂–∏“ª–∞–∑ / –°–ª–æ–º–∞–Ω–Ω–∞—è –º–µ–±–µ–ª—å",
    "ü™ü –¢–µ—Ä–µ–∑–µ –∂–∞–±—ã–ª–º–∞–π–¥—ã / –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –æ–∫–Ω–æ",
    "üßº –ï–¥–µ–Ω –ª–∞—Å / –ì—Ä—è–∑–Ω—ã–π –ø–æ–ª",
    "üóë “ö–æ“õ—ã—Å —à—ã“ì–∞—Ä—ã–ª–º–∞“ì–∞–Ω / –ú—É—Å–æ—Ä –Ω–µ –≤—ã–Ω–µ—Å–µ–Ω",
    "–î—Ä—É–≥–æ–µ / –ë–∞—Å“õ–∞",
]

COMMON_PLACE_PROBLEMS = [
    "–õ–∞—Å / –ì—Ä—è–∑—å ‚Äì –µ–¥–µ–Ω, “õ–∞–±—ã—Ä“ì–∞, –∏—ñ—Å / –ø–æ–ª, —Å—Ç–µ–Ω—ã, –∑–∞–ø–∞—Ö",
    "–°—ã–Ω“ì–∞–Ω –∂–∏“ª–∞–∑ / –°–ª–æ–º–∞–Ω–Ω–∞—è –º–µ–±–µ–ª—å ‚Äì “Ø—Å—Ç–µ–ª, –æ—Ä—ã–Ω–¥—ã“õ / —Å—Ç–æ–ª—ã, —Å—Ç—É–ª—å—è",
    "–ñ–∞–±–¥—ã“õ—Ç—ã“£ –∞“õ–∞—É—ã / –ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ ‚Äì —à–∞–º, —Ç–µ—Ö–Ω–∏–∫–∞ / –æ—Å–≤–µ—â–µ–Ω–∏–µ, —Ç–µ—Ö–Ω–∏–∫–∞",
    "–°—É –∞“ì—É—ã / –£—Ç–µ—á–∫–∞ –≤–æ–¥—ã ‚Äì –∫—Ä–∞–Ω, “õ“±–±—ã—Ä / –∫—Ä–∞–Ω—ã, —Ç—Ä—É–±—ã",
    "“ö–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ –±“±–∑—É—à—ã–ª—ã“ì—ã / –ù–∞—Ä—É—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚Äì —Å—ã—Ä“ì–∞–Ω–∞“õ –µ–¥–µ–Ω, —Å—ã–º–¥–∞—Ä / —Å–∫–æ–ª—å–∑–∫–∏–π –ø–æ–ª, –ø—Ä–æ–≤–æ–¥–∞",
    "“ö–æ“õ—ã—Å —à—ã“ì–∞—Ä—ã–ª–º–∞“ì–∞–Ω / –ú—É—Å–æ—Ä –Ω–µ –≤—ã–Ω–µ—Å–µ–Ω ‚Äì “õ–æ“õ—ã—Å –∂”ô—à—ñ–≥—ñ —Ç–æ–ª—ã / –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É—Ä–Ω—ã",
    "–î—Ä—É–≥–æ–µ / –ë–∞—Å“õ–∞",
]

CONDITION_3 = ["–ù–∞—à–∞—Ä / –ü–ª–æ—Ö–æ–µ", "–û—Ä—Ç–∞—à–∞ / –°—Ä–µ–¥–Ω–µ–µ", "–ñ–∞“õ—Å—ã / –•–æ—Ä–æ—à–µ–µ"]

@router.message(Survey.clean_branch)
async def clean_branch(message: types.Message, state: FSMContext):
    choice = message.text
    await state.update_data(clean_branch=choice)

    if choice.startswith("üßπ") or choice.startswith("üè¢"):
        await message.answer("üè¢ “ö–∞–π “õ–∞–±–∞—Ç? / –ö–∞–∫–æ–π —ç—Ç–∞–∂?", reply_markup=floors_keyboard())
        await state.set_state(Survey.clean_floor)
        return
    if choice.startswith("üå°"):
        await message.answer("üìç “ö–∞–π –∂–µ—Ä–¥–µ? / –ì–¥–µ –∏–º–µ–Ω–Ω–æ?", reply_markup=kb(TEMP_LOCATIONS, row_size=1))
        await state.set_state(Survey.temp_location)
        return
    await message.answer("–¢—ñ–∑—ñ–º–Ω–µ–Ω —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

@router.message(Survey.clean_floor)
async def clean_floor(message: types.Message, state: FSMContext):
    await state.update_data(clean_floor=message.text)
    data = await state.get_data()
    branch = data.get("clean_branch", "")
    if branch.startswith("üßπ"):
        await message.answer("üè´ “ö–∞–π –∫–∞–±–∏–Ω–µ—Ç? / –ö–∞–∫–æ–π –∫–∞–±–∏–Ω–µ—Ç? ‚Äî ¬´–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç¬ª", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.clean_classroom)
    else:
        await message.answer("7Ô∏è‚É£ –ù–∞“õ—Ç—ã –æ—Ä—ã–Ω–¥—ã –∂–∞–∑—ã“£—ã–∑ / –£—Ç–æ—á–Ω–∏—Ç–µ –º–µ—Å—Ç–æ ‚Äî ¬´–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç¬ª", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.clean_specific_place)

@router.message(Survey.clean_classroom)
async def clean_classroom(message: types.Message, state: FSMContext):
    await state.update_data(clean_classroom=message.text)
    await message.answer("üîé –ú”ô—Å–µ–ª–µ“£—ñ–∑–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=kb(CLASS_CLEAN_PROBLEMS, row_size=1))
    await state.set_state(Survey.clean_problem_choice)

@router.message(Survey.clean_specific_place)
async def clean_specific_place(message: types.Message, state: FSMContext):
    await state.update_data(clean_specific_place=message.text)
    await message.answer("üîé –ú”ô—Å–µ–ª–µ–Ω—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=kb(COMMON_PLACE_PROBLEMS, row_size=1))
    await state.set_state(Survey.clean_problem_choice)

@router.message(Survey.clean_problem_choice)
async def clean_problem_choice(message: types.Message, state: FSMContext):
    txt = message.text
    if "–î—Ä—É–≥–æ–µ" in txt or "–ë–∞—Å“õ–∞" in txt:
        await state.update_data(other_target="clean_problem_text", other_next="clean_condition_3")
        await message.answer("‚úç –ú”ô—Å–µ–ª–µ–Ω—ñ –∂–∞–∑—ã“£—ã–∑ / –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.other_input)
        return
    await state.update_data(clean_problem_text=txt)
    await message.answer("üßº –ñ–∞“ì–¥–∞–π—ã–Ω –±–∞“ì–∞–ª–∞“£—ã–∑ / –û—Ü–µ–Ω–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:", reply_markup=kb(CONDITION_3, row_size=1))
    await state.set_state(Survey.clean_condition_3)

@router.message(Survey.clean_condition_3)
async def clean_condition_3(message: types.Message, state: FSMContext):
    await state.update_data(clean_condition_3=message.text)
    await begin_final_questions(message, state)

# ---------- Temperature subset ----------
TEMP_LOCATIONS = [
    "–ö–∞–±–∏–Ω–µ—Ç","–î”ô–ª—ñ–∑ / –ö–æ—Ä–∏–¥–æ—Ä","–ë–∞—Å–ø–∞–ª–¥–∞“õ / –õ–µ—Å—Ç–Ω–∏—Ü–∞","–§–æ–π–µ (—Ö–æ–ª–ª) / –•–æ–ª–ª",
    "–ê—Å—Ö–∞–Ω–∞ –∞–π–º–∞“ì—ã / –ó–æ–Ω–∞ —Å—Ç–æ–ª–æ–≤–æ–π","–°–ø–æ—Ä—Ç–∑–∞–ª / –°–ø–æ—Ä—Ç–∑–∞–ª","”ò–∂–µ—Ç—Ö–∞–Ω–∞ / –°–∞–Ω—É–∑–µ–ª","–î—Ä—É–≥–æ–µ / –ë–∞—Å“õ–∞",
]
TEMP_COND = ["–´—Å—Ç—ã“õ / –ñ–∞—Ä–∫–æ","–°—É—ã“õ / –•–æ–ª–æ–¥–Ω–æ","–î—Ä—É–≥–æ–µ / –ë–∞—Å“õ–∞"]

@router.message(Survey.temp_location)
async def temp_location(message: types.Message, state: FSMContext):
    txt = message.text
    if "–î—Ä—É–≥–æ–µ" in txt or "–ë–∞—Å“õ–∞" in txt:
        await state.update_data(other_target="temp_location", other_next="temp_floor")
        await message.answer("‚úç ”®–∑ –Ω“±—Å“õ–∞“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ / –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –º–µ—Å—Ç–∞:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.other_input)
        return
    await state.update_data(temp_location=txt)
    await message.answer("üè¢ “ö–∞–π “õ–∞–±–∞—Ç? / –ö–∞–∫–æ–π —ç—Ç–∞–∂?", reply_markup=floors_keyboard())
    await state.set_state(Survey.temp_floor)

@router.message(Survey.temp_floor)
async def temp_floor(message: types.Message, state: FSMContext):
    await state.update_data(clean_floor=message.text)
    await message.answer("7Ô∏è‚É£ –ù–∞“õ—Ç—ã –æ—Ä—ã–Ω–¥—ã –∂–∞–∑—ã“£—ã–∑ / –£—Ç–æ—á–Ω–∏—Ç–µ –º–µ—Å—Ç–æ ‚Äî ¬´–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç¬ª", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Survey.temp_specific_place)

@router.message(Survey.temp_specific_place)
async def temp_specific_place(message: types.Message, state: FSMContext):
    await state.update_data(clean_specific_place=message.text)
    await message.answer("üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: —Å—ñ–∑–≥–µ —Å—É—ã“õ –ø–∞, ”ô–ª–¥–µ —ã—Å—Ç—ã“õ –ø–∞? / –í–∞–º —Ö–æ–ª–æ–¥–Ω–æ –∏–ª–∏ –∂–∞—Ä–∫–æ?", reply_markup=kb(TEMP_COND, row_size=1))
    await state.set_state(Survey.temp_condition_choice)

@router.message(Survey.temp_condition_choice)
async def temp_condition_choice(message: types.Message, state: FSMContext):
    txt = message.text
    if "–î—Ä—É–≥–æ–µ" in txt or "–ë–∞—Å“õ–∞" in txt:
        await state.update_data(other_target="temp_condition_choice", other_next=None)
        await message.answer("‚úç ”®–∑ –Ω“±—Å“õ–∞“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ / –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.other_input)
        return
    await state.update_data(temp_condition_choice=txt)
    await begin_final_questions(message, state)

# ---------- Food ----------
FOOD_OPTIONS = [
    "–ê—Å—Ö–∞–Ω–∞ “õ—ã–∑–º–µ—Ç—ñ–Ω –±–∞“ì–∞–ª–∞—É / –û—Ü–µ–Ω–∫–∞ —Ä–∞–±–æ—Ç—ã —Å—Ç–æ–ª–æ–≤–æ–π",
    "–´—Å—Ç—ã“õ —Ç–∞–º–∞“õ—Ç—ã“£ –±–æ–ª–º–∞—É—ã / –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥–æ—Ä—è—á–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è",
    "–°–∞–ª“õ—ã–Ω —Ç–∞“ì–∞–º–¥–∞—Ä / –ë–ª—é–¥–∞ —Ö–æ–ª–æ–¥–Ω—ã–µ",
    "–ö–µ–∑–µ–∫ > 10 –º–∏–Ω—É—Ç / –û—á–µ—Ä–µ–¥–∏ > 10 –º–∏–Ω",
    "–¢”ô—Ç—Ç—ñ —Å—É—Å—ã–Ω–¥–∞—Ä–¥—ã“£ (–≥–∞–∑–¥–∞–ª“ì–∞–Ω) —Å–∞—Ç—ã–ª—É—ã / –ü—Ä–æ–¥–∞–∂–∞ —Å–ª–∞–¥–∫–∏—Ö (–≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö) –Ω–∞–ø–∏—Ç–∫–æ–≤",
    "–¢–∞–º–∞“õ—Ç–∞–Ω—É–¥—ã“£ –±—ñ—Ä—Å–∞—Ä—ã–Ω–¥—ã“ì—ã / –û–¥–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø–∏—Ç–∞–Ω–∏—è",
    "–¢–∞–º–∞“õ “Ø–ª–µ—Å—Ç—ñ—Ä—É–¥—ñ“£ ”ô–ª—Å—ñ–∑ “±–π—ã–º–¥–∞—Å—Ç—ã—Ä—ã–ª—É—ã / –°–ª–∞–±–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–∑–¥–∞—á–∏",
    "–°–∞–Ω–∏—Ç–∞—Ä–ª—ã“õ –Ω–æ—Ä–º–∞–ª–∞—Ä–¥—ã“£ –±“±–∑—ã–ª—É—ã / –ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –Ω–æ—Ä–º",
    "–£–∞“õ—ã—Ç –∂–µ—Ç—ñ—Å–ø–µ—É—ñ / –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–∏",
    "–ë–∞“ì–∞–Ω—ã“£ –∂–æ“ì–∞—Ä—ã –±–æ–ª—É—ã / –ó–∞–≤—ã—à–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã",
    "–î—Ä—É–≥–æ–µ / –ë–∞—Å“õ–∞",
]

@router.message(Survey.food_problem)
async def food_problem(message: types.Message, state: FSMContext):
    txt = message.text
    if "–î—Ä—É–≥–æ–µ" in txt or "–ë–∞—Å“õ–∞" in txt:
        await state.update_data(other_target="food_problem", other_next=None)
        await message.answer("‚úç ”®–∑ –Ω“±—Å“õ–∞“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ / –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.other_input)
        return
    await state.update_data(food_problem=txt)
    await begin_final_questions(message, state)

# ---------- Study process ----------
STUDY_TOPICS = [
    "üìÖ –°–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ –∂”ô–Ω–µ —Å—Ä—ã–≤—ã / –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—Ä—ã–≤—ã —É—Ä–æ–∫–æ–≤",
    "üìö –ü”ô–Ω–¥–µ—Ä / –£—á–µ–±–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã",
    "üë©‚Äçüè´ –ú–µ–∫—Ç–µ–ø—Ç–µ–≥—ñ —Ç”ô—Ä—Ç—ñ–ø / –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –≤ —à–∫–æ–ª–µ",
]
SCHEDULE_PROBLEMS = [
    "‚ùå –°–∞–±–∞“õ ”©—Ç–∫—ñ–∑—ñ–ª–º–µ–¥—ñ / –£—Ä–æ–∫ –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è",
    "‚è≥ –°–∞–±–∞“õ —Ç–æ–ª—ã“õ ”©—Ç–∫—ñ–∑—ñ–ª–º–µ–¥—ñ / –£—Ä–æ–∫ —Å–æ—Å—Ç–æ—è–ª—Å—è —á–∞—Å—Ç–∏—á–Ω–æ",
    "üóì –ö–µ—Å—Ç–µ–¥–µ “õ–∞—Ç–µ / –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏",
    "üîÅ –ö–∞–±–∏–Ω–µ—Ç—Ç–µ—Ä –∞–ª—ã—Å / –î–ª–∏–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏",
    "‚è± “Æ–∑—ñ–ª—ñ—Å—Ç–µ—Ä “õ–æ–ª–∞–π—Å—ã–∑ / –ü–µ—Ä–µ–º–µ–Ω—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–µ",
    "‚ûï –ö–µ—Å—Ç–µ–¥–µ –ø”ô–Ω–¥–µ—Ä—ñ “õ–∏—ã–Ω–¥—ã“ì—ã –µ—Å–∫–µ—Ä—ñ–ª–º–µ–≥–µ–Ω / –ù–µ —É—á—Ç–µ–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
    "–î—Ä—É–≥–æ–µ / –ë–∞—Å“õ–∞",
]
SCHEDULE_NEEDS_SUBJECT_DATE_MARKERS = ["”©—Ç–∫—ñ–∑—ñ–ª–º–µ–¥—ñ","–Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è","—Ç–æ–ª—ã“õ","—á–∞—Å—Ç–∏—á–Ω–æ","“õ–∞—Ç–µ","–æ—à–∏–±–∫–∞"]
SUBJECTS = [
    "“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ","–û—Ä—ã—Å —Ç—ñ–ª—ñ","–ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ","–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞","–§–∏–∑–∏–∫–∞","–•–∏–º–∏—è","–ë–∏–æ–ª–æ–≥–∏—è","–ì–µ–æ–≥—Ä–∞—Ñ–∏—è","–¢–∞—Ä–∏—Ö","–î–µ–Ω–µ —à—ã–Ω—ã“õ—Ç—ã—Ä—É","–î—Ä—É–≥–æ–µ / –ë–∞—Å“õ–∞",
]
SUBJECT_PROBLEMS = [
    "üìä –ë–∞“ì–∞–ª–∞—É ”ô–¥—ñ—Å—ñ / –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è",
    "üè† “Æ–π –∂“±–º—ã—Å—ã —Ç—ã–º –∫”©–ø / –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è",
    "ü§î –ú“±“ì–∞–ª—ñ–º–Ω—ñ“£ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—É—ñ “õ–∏—ã–Ω / –°–ª–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è",
    "‚ûï –ú“±“ì–∞–ª—ñ–º —Ç–∞—Ä–∞–ø—ã–Ω–∞–Ω –¥”©—Ä–µ–∫—ñ–ª—ñ–∫ / –ì—Ä—É–±–æ—Å—Ç—å —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —É—á–∏—Ç–µ–ª—è",
    "–î—Ä—É–≥–æ–µ / –ë–∞—Å“õ–∞",
]

@router.message(Survey.study_class_number)
async def study_class_number(message: types.Message, state: FSMContext):
    await state.update_data(study_class_number=message.text)
    await message.answer("üî§ –õ–∏—Ç–µ—Ä / –õ–∏—Ç–µ—Ä–∞:", reply_markup=liter_keyboard())
    await state.set_state(Survey.study_liter)

@router.message(Survey.study_liter)
async def study_liter(message: types.Message, state: FSMContext):
    await state.update_data(study_liter=message.text)
    await message.answer("üìò –¢–∞“õ—ã—Ä—ã–ø / –¢–µ–º–∞:", reply_markup=kb(STUDY_TOPICS, row_size=1))
    await state.set_state(Survey.study_topic)

@router.message(Survey.study_topic)
async def study_topic(message: types.Message, state: FSMContext):
    txt = message.text
    await state.update_data(study_topic=txt)
    low = txt.lower()
    if "—Ä–∞—Å–ø–∏—Å" in low or "–∫–µ—Å—Ç–µ" in low or "—Å—Ä—ã–≤" in low:
        await message.answer("üóì –ú”ô—Å–µ–ª–µ–Ω—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –ü—Ä–æ–±–ª–µ–º–∞ (–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ):", reply_markup=kb(SCHEDULE_PROBLEMS, row_size=1))
        await state.set_state(Survey.schedule_problem)
        return
    if "–ø”ô–Ω" in low or "–ø—Ä–µ–¥–º–µ—Ç" in low:
        await message.answer("üìö –ü”ô–Ω / –ü—Ä–µ–¥–º–µ—Ç:", reply_markup=kb(SUBJECTS, row_size=2))
        await state.set_state(Survey.subject)
        return
    await message.answer("üß≠ –ú”ô—Å–µ–ª–µ–Ω—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –ü—Ä–æ–±–ª–µ–º–∞ (–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞):", reply_markup=kb(DISCIPLINE_PROBLEMS, row_size=1))
    await state.set_state(Survey.discipline_problem)

@router.message(Survey.schedule_problem)
async def schedule_problem(message: types.Message, state: FSMContext):
    txt = message.text
    await state.update_data(schedule_problem=txt)
    need_subj_date = any(m in txt.lower() for m in SCHEDULE_NEEDS_SUBJECT_DATE_MARKERS)
    if "–î—Ä—É–≥–æ–µ" in txt or "–ë–∞—Å“õ–∞" in txt:
        await begin_final_questions(message, state)
        return
    if need_subj_date:
        await message.answer("üìö –ü”ô–Ω / –ü—Ä–µ–¥–º–µ—Ç:", reply_markup=kb(SUBJECTS, row_size=2))
        await state.set_state(Survey.schedule_subject)
    else:
        await begin_final_questions(message, state)

@router.message(Survey.schedule_subject)
async def schedule_subject(message: types.Message, state: FSMContext):
    txt = message.text
    if "–î—Ä—É–≥–æ–µ" in txt or "–ë–∞—Å“õ–∞" in txt:
        await state.update_data(other_target="schedule_subject", other_next="schedule_date")
        await message.answer("‚úç –ü”ô–Ω –∞—Ç–∞—É—ã–Ω –∂–∞–∑—ã“£—ã–∑ / –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.other_input)
        return
    await state.update_data(schedule_subject=txt)
    await message.answer("üìÖ –î–∞—Ç–∞ ‚Äî ¬´–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç¬ª (–Ω–∞–ø—Ä.: 2025-09-01):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Survey.schedule_date)

@router.message(Survey.schedule_date)
async def schedule_date(message: types.Message, state: FSMContext):
    await state.update_data(schedule_date=message.text)
    await begin_final_questions(message, state)

@router.message(Survey.subject)
async def subject(message: types.Message, state: FSMContext):
    txt = message.text
    if "–î—Ä—É–≥–æ–µ" in txt or "–ë–∞—Å“õ–∞" in txt:
        await state.update_data(other_target="subject", other_next="subject_problem")
        await message.answer("‚úç –ü”ô–Ω –∞—Ç–∞—É—ã–Ω –∂–∞–∑—ã“£—ã–∑ / –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.other_input)
        return
    await state.update_data(subject=txt)
    await message.answer("üß© –ü—Ä–æ–±–ª–µ–º–∞ (–ü”ô–Ω–¥–µ—Ä):", reply_markup=kb(SUBJECT_PROBLEMS, row_size=1))
    await state.set_state(Survey.subject_problem)

@router.message(Survey.subject_problem)
async def subject_problem(message: types.Message, state: FSMContext):
    txt = message.text
    if "–î—Ä—É–≥–æ–µ" in txt or "–ë–∞—Å“õ–∞" in txt:
        await state.update_data(other_target="subject_problem", other_next=None)
        await message.answer("‚úç ”®–∑ –Ω“±—Å“õ–∞“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ / –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.other_input)
        return
    await state.update_data(subject_problem=txt)
    await begin_final_questions(message, state)

# ---------- Security ----------
SECURITY_CATEGORIES = [
    "üö® –ñ–∞“ì–¥–∞–π / –ò–Ω—Ü–∏–¥–µ–Ω—Ç",
    "üëÆ “ö–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ “õ—ã–∑–º–µ—Ç—ñ / –°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    "‚ö†Ô∏è “ö–∞—É—ñ–ø / –û–ø–∞—Å–Ω–æ—Å—Ç—å",
]

# ---------- Discipline ----------
DISCIPLINE_PROBLEMS = [
    "‚è± –°–∞–±–∞“õ—Ç–∞–Ω >10 –º–∏–Ω –∫–µ—à—ñ–≥—É / –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ —É—Ä–æ–∫–µ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç",
    "üîä –®—É, –Ω–∞–∑–∞—Ä –∞—É–¥–∞—Ä–º–∞—É, —Ç”ô—Ä—Ç—ñ–ø –±“±–∑—É / –®—É–º, –æ—Ç–≤–ª–µ—á–µ–Ω–∏–µ, –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞",
    "üôÖ‚Äç‚ôÇ –¢–∞–ø—Å—ã—Ä–º–∞–Ω—ã –æ—Ä—ã–Ω–¥–∞—É–¥–∞–Ω –±–∞—Å —Ç–∞—Ä—Ç—É, –¥”©—Ä–µ–∫—ñ –º—ñ–Ω–µ–∑-“õ“±–ª—ã“õ / –û—Ç–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è, –¥–µ—Ä–∑–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ",
    "ü§º‚Äç‚ôÇ –°—ã–Ω—ã–ø—Ç–∞—Å—ã–º–µ–Ω –∂–∞–Ω–∂–∞–ª / –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–æ–º",
    "üë®‚Äçüè´ –ú“±“ì–∞–ª—ñ–º–º–µ–Ω –∂–∞–Ω–∂–∞–ª / –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å —É—á–∏—Ç–µ–ª–µ–º",
    "üì± –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ–º–µ—Å–µ “õ“±—Ä—ã–ª“ì—ã–Ω—ã —Å–∞–±–∞“õ—Ç–∞ –ø–∞–π–¥–∞–ª–∞–Ω—É / –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≥–∞–¥–∂–µ—Ç–∞",
    "üß¢ –ú–µ–∫—Ç–µ–ø —Ñ–æ—Ä–º–∞—Å—ã–Ω —Å–∞“õ—Ç–∞–º–∞—É / –ù–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ —à–∫–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã",
    "üö¨ –¢—ã–π—ã–º —Å–∞–ª—ã–Ω“ì–∞–Ω –∑–∞—Ç—Ç–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—É / –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã",
    "ü™ß –°–∞–±–∞“õ –∫–µ–∑—ñ–Ω–¥–µ —Ä“±“õ—Å–∞—Ç—Å—ã–∑ –∫–µ—Ç—É / –°–∞–º–æ–≤–æ–ª—å–Ω—ã–π —É—Ö–æ–¥ —Å —É—Ä–æ–∫–∞",
    "üì≤ –ë—É–ª–ª–∏–Ω–≥ / –ö–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥",
    "ü™ë –ú“Ø–ª—ñ–∫—Ç—ñ –±“Ø–ª–¥—ñ—Ä—É / –ü–æ—Ä—á–∞ –∏–º—É—â–µ—Å—Ç–≤–∞",
    "–î—Ä—É–≥–æ–µ / –ë–∞—Å“õ–∞",
]

@router.message(Survey.discipline_problem)
async def discipline_problem(message: types.Message, state: FSMContext):
    txt = message.text
    if "–î—Ä—É–≥–æ–µ" in txt or "–ë–∞—Å“õ–∞" in txt:
        await state.update_data(other_target="discipline_problem", other_next="discipline_student_name")
        await message.answer("üìù –°–∏–ø–∞—Ç—Ç–∞“£—ã–∑ / –û–ø–∏—à–∏—Ç–µ:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.other_input)
        return
    await state.update_data(discipline_problem=txt)
    await message.answer("üßë‚Äçüéì –û“õ—É—à—ã(–ª–∞—Ä) –§–ò–û ‚Äî ¬´–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç¬ª:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Survey.discipline_student_name)

@router.message(Survey.discipline_student_name)
async def discipline_student_name(message: types.Message, state: FSMContext):
    await state.update_data(discipline_student_name=message.text)
    await begin_final_questions(message, state)

# ---------- Complaints & Ideas ----------
COMPLAINT_AREAS = [
    "üçΩ –¢–∞–º–∞“õ —Å–∞–ø–∞—Å—ã / –ö–∞—á–µ—Å—Ç–≤–æ –ø–∏—Ç–∞–Ω–∏—è","üç¥ –¢–∞–º–∞“õ—Ç–∞–Ω—É–¥—ã “±–π—ã–º–¥–∞—Å—Ç—ã—Ä—É / –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è","üìö –û“õ—É –ø—Ä–æ—Ü–µ—Å—ñ / –£—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å",
    "üë®‚Äçüè´ –ú“±“ì–∞–ª—ñ–º–¥–µ—Ä–¥—ñ“£ –∂“±–º—ã—Å—ã / –†–∞–±–æ—Ç–∞ —É—á–∏—Ç–µ–ª–µ–π","üßë‚Äçüè´ –°—ã–Ω—ã–ø –∂–µ—Ç–µ–∫—à—ñ—Å—ñ / –ö–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å","üîÑ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –∂”ô–Ω–µ –∞“õ–ø–∞—Ä–∞—Ç / –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "‚ö† “ö–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ / –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å","üßπ “í–∏–º–∞—Ä–∞—Ç—Ç–∞—Ä–¥—ã“£ —Ç–∞–∑–∞–ª—ã“ì—ã / –ß–∏—Å—Ç–æ—Ç–∞ –ø–æ–º–µ—â–µ–Ω–∏–π","üé≠ –ö—Ä—É–∂–∫–∏ –∂”ô–Ω–µ “Ø–π—ñ—Ä–º–µ–ª–µ—Ä / –ö—Ä—É–∂–∫–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞",
    "üè´ –°—ã–Ω—ã–ø—Ç–∞–Ω —Ç—ã—Å —ñ—Å-—à–∞—Ä–∞–ª–∞—Ä / –í–Ω–µ–∫–ª–∞—Å—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞","üìñ “í—ã–ª—ã–º–∏-”ô–¥—ñ—Å—Ç–µ–º–µ–ª—ñ–∫ –∂“±–º—ã—Å / –ù–∞—É—á–Ω–æ-–º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞","–î—Ä—É–≥–æ–µ / –ë–∞—Å“õ–∞",
]

@router.message(Survey.complaint_area)
async def complaint_area(message: types.Message, state: FSMContext):
    txt = message.text
    if "–î—Ä—É–≥–æ–µ" in txt or "–ë–∞—Å“õ–∞" in txt:
        await state.update_data(other_target="complaint_area", other_next="complaint_text")
        await message.answer("‚úç ”®–∑ –Ω“±—Å“õ–∞“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ / –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.other_input)
        return
    await state.update_data(complaint_area=txt)
    await message.answer("5Ô∏è‚É£ “∞—Å—ã–Ω—ã—Å—Ç—ã/—à–∞“ì—ã–º–¥—ã —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑ ‚Äî ¬´–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç¬ª:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Survey.complaint_text)

@router.message(Survey.complaint_text)
async def complaint_text(message: types.Message, state: FSMContext):
    await state.update_data(complaint_text=message.text)
    await begin_final_questions(message, state)

IDEA_AREAS = [
    "‚öô –ü—Ä–æ—Ü–µ—Å—Ç—ñ –æ“£—Ç–∞–π–ª–∞–Ω–¥—ã—Ä—É / –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞","ü™ë –ñ“±–º—ã—Å –æ—Ä–Ω—ã–Ω –∂–∞“õ—Å–∞—Ä—Ç—É / –£–ª—É—á—à–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞","üíß –†–µ—Å—É—Ä—Å—Ç–∞—Ä–¥—ã “Ø–Ω–µ–º–¥–µ—É / –≠–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤",
    "üìö –û“õ—ã—Ç—É —Å–∞–ø–∞—Å—ã–Ω –∞—Ä—Ç—Ç—ã—Ä—É / –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—É—á–µ–Ω–∏—è","üíª –¶–∏—Ñ—Ä–ª–∞–Ω–¥—ã—Ä—É / –¶–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è","üõ° “ö–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫—Ç—ñ –∞—Ä—Ç—Ç—ã—Ä—É / –£–ª—É—á—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏","–î—Ä—É–≥–æ–µ / –ë–∞—Å“õ–∞",
]

@router.message(Survey.idea_area)
async def idea_area(message: types.Message, state: FSMContext):
    txt = message.text
    if "–î—Ä—É–≥–æ–µ" in txt or "–ë–∞—Å“õ–∞" in txt:
        await state.update_data(other_target="idea_area", other_next="idea_effect")
        await message.answer("‚úç ”®–∑ –Ω“±—Å“õ–∞“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ / –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.other_input)
        return
    await state.update_data(idea_area=txt)
    await message.answer("5Ô∏è‚É£ ‚ú® –ö“Ø—Ç—ñ–ª–µ—Ç—ñ–Ω —ç—Ñ—Ñ–µ–∫—Ç / –û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç ‚Äî ¬´–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç¬ª:")
    await state.set_state(Survey.idea_effect)

@router.message(Survey.idea_effect)
async def idea_effect(message: types.Message, state: FSMContext):
    await state.update_data(idea_effect=message.text)
    await message.answer("6Ô∏è‚É£ üìù “ö—ã—Å“õ–∞—à–∞ —Å–∏–ø–∞—Ç—Ç–∞–º–∞ / –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî ¬´–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç¬ª:")
    await state.set_state(Survey.idea_description)

@router.message(Survey.idea_description)
async def idea_description(message: types.Message, state: FSMContext):
    await state.update_data(idea_description=message.text)
    await message.answer("7Ô∏è‚É£ üë§ –ê–≤—Ç–æ—Ä (–∞—Ç—ã-–∂”©–Ω—ñ –∂”ô–Ω–µ —Ä”©–ª—ñ) / –ê–≤—Ç–æ—Ä (–∏–º—è –∏ —Ä–æ–ª—å) ‚Äî ¬´–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç¬ª:")
    await state.set_state(Survey.idea_author)

@router.message(Survey.idea_author)
async def idea_author(message: types.Message, state: FSMContext):
    await state.update_data(idea_author=message.text)
    await begin_final_questions(message, state)

# ---------- Security ----------
@router.message(Survey.security_category)
async def security_category(message: types.Message, state: FSMContext):
    txt = message.text
    await state.update_data(security_category=txt)
    
    if txt.startswith("üö®"):  # Incident
        await message.answer("–ñ–∞“ì–¥–∞–π —Ç“Ø—Ä—ñ / –¢–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:", reply_markup=kb([
            "–ñ–∞—Ä–∞“õ–∞—Ç / –¢—Ä–∞–≤–º–∞",
            "–¢”©–±–µ–ª–µ—Å / –î—Ä–∞–∫–∞", 
            "“∞—Ä–ª—ã“õ / –ö—Ä–∞–∂–∞",
            "–í–∞–Ω–¥–∞–ª–∏–∑–º / –í–∞–Ω–¥–∞–ª–∏–∑–º",
            "–î—Ä—É–≥–æ–µ / –ë–∞—Å“õ–∞"
        ], row_size=1))
        await state.set_state(Survey.security_incident_type)
        return
    elif txt.startswith("üëÆ"):  # Security service
        await message.answer("“ö–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ “õ—ã–∑–º–µ—Ç—ñ –º”ô—Å–µ–ª–µ—Å—ñ / –ü—Ä–æ–±–ª–µ–º–∞ —Å–ª—É–∂–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:", reply_markup=kb([
            "“ö—ã–∑–º–µ—Ç–∫–µ—Ä–¥—ñ“£ –±–æ–ª–º–∞—É—ã / –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
            "–ö–µ—à –∫–µ–ª—É / –û–ø–æ–∑–¥–∞–Ω–∏–µ",
            "–ú—ñ–Ω–¥–µ—Ç—Ç–µ—Ä–¥—ñ –æ—Ä—ã–Ω–¥–∞–º–∞—É / –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π", 
            "–î—Ä—É–≥–æ–µ / –ë–∞—Å“õ–∞"
        ], row_size=1))
        await state.set_state(Survey.security_guard_issue)
        return
    else:  # Hazard
        await message.answer("“ö–∞—É—ñ–ø —Ç“Ø—Ä—ñ / –¢–∏–ø –æ–ø–∞—Å–Ω–æ—Å—Ç–∏:", reply_markup=kb([
            "–°—ã–Ω“ì–∞–Ω –∂–∞–±–¥—ã“õ / –°–ª–æ–º–∞–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
            "–°—ã—Ä“ì–∞–Ω–∞“õ –µ–¥–µ–Ω / –°–∫–æ–ª—å–∑–∫–∏–π –ø–æ–ª",
            "–≠–ª–µ–∫—Ç—Ä “õ–∞—É–ø—ñ / –≠–ª–µ–∫—Ç—Ä–æ–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "–ü–æ–∂–∞—Ä “õ–∞—É–ø—ñ / –ü–æ–∂–∞—Ä–æ–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "–î—Ä—É–≥–æ–µ / –ë–∞—Å“õ–∞"
        ], row_size=1))
        await state.set_state(Survey.security_hazard_issue)
        return

@router.message(Survey.security_incident_type)
async def security_incident_type(message: types.Message, state: FSMContext):
    txt = message.text
    if "–î—Ä—É–≥–æ–µ" in txt or "–ë–∞—Å“õ–∞" in txt:
        await state.update_data(other_target="security_incident_type", other_next="security_incident_desc")
        await message.answer("‚úç ”®–∑ –Ω“±—Å“õ–∞“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ / –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.other_input)
        return
    await state.update_data(security_incident_type=txt)
    await message.answer("üìù –ñ–∞“ì–¥–∞–π–¥—ã —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑ / –û–ø–∏—à–∏—Ç–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Survey.security_incident_desc)

@router.message(Survey.security_incident_desc)
async def security_incident_desc(message: types.Message, state: FSMContext):
    await state.update_data(security_incident_desc=message.text)
    await begin_final_questions(message, state)

@router.message(Survey.security_guard_issue)
async def security_guard_issue(message: types.Message, state: FSMContext):
    txt = message.text
    if "–î—Ä—É–≥–æ–µ" in txt or "–ë–∞—Å“õ–∞" in txt:
        await state.update_data(other_target="security_guard_issue", other_next=None)
        await message.answer("‚úç ”®–∑ –Ω“±—Å“õ–∞“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ / –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.other_input)
        return
    await state.update_data(security_guard_issue=txt)
    await begin_final_questions(message, state)

@router.message(Survey.security_hazard_issue)
async def security_hazard_issue(message: types.Message, state: FSMContext):
    txt = message.text
    if "–î—Ä—É–≥–æ–µ" in txt or "–ë–∞—Å“õ–∞" in txt:
        await state.update_data(other_target="security_hazard_issue", other_next=None)
        await message.answer("‚úç ”®–∑ –Ω“±—Å“õ–∞“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ / –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.other_input)
        return
    await state.update_data(security_hazard_issue=txt)
    await begin_final_questions(message, state)

# ---------- Tech ----------
TECH_OPTIONS = [
    "üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç / Wi-Fi","üñ• –ö–æ–º–ø—å—é—Ç–µ—Ä / –ù–æ—É—Ç–±—É–∫","üìΩ –ü—Ä–æ–µ–∫—Ç–æ—Ä / –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—Ç—ñ –ø–∞–Ω–µ–ª—å / –ü—Ä–æ–µ–∫—Ç–æ—Ä / –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å",
    "üñ® –ü—Ä–∏–Ω—Ç–µ—Ä / –ö”©—à—ñ—Ä–º–µ “õ“±—Ä—ã–ª“ì—ã—Å—ã / –ü—Ä–∏–Ω—Ç–µ—Ä / –ö–æ–ø–∏—Ä","üß© –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ–º–µ—Å–µ –ë“ö (eKundelik, LMS, Teams –∂”ô–Ω–µ —Ç.–±.) / –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏–ª–∏ –ü–û (eKundelik, LMS –∏ –¥—Ä.)",
    "‚ö° –≠–ª–µ–∫—Ç—Ä “õ—É–∞—Ç—ã / –≠–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ","–î—Ä—É–≥–æ–µ / –ë–∞—Å“õ–∞",
]

@router.message(Survey.tech_issue)
async def tech_issue(message: types.Message, state: FSMContext):
    txt = message.text
    if "–î—Ä—É–≥–æ–µ" in txt or "–ë–∞—Å“õ–∞" in txt:
        await state.update_data(other_target="tech_issue", other_next="tech_room")
        await message.answer("‚úç ”®–∑ –Ω“±—Å“õ–∞“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ / –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Survey.other_input)
        return
    await state.update_data(tech_issue=txt)
    await message.answer("5Ô∏è‚É£ –ö–∞–±–∏–Ω–µ—Ç –Ω–æ–º–µ—Ä—ñ / –ù–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ ‚Äî ¬´–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç¬ª:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Survey.tech_room)

@router.message(Survey.tech_room)
async def tech_room(message: types.Message, state: FSMContext):
    await state.update_data(tech_room=message.text)
    await begin_final_questions(message, state)

# ---------- Health (S8) ----------
@router.message(Survey.health_text)
async def health_text(message: types.Message, state: FSMContext):
    # Free text; stored to 'Other' for S8
    await state.update_data(health_text=message.text)
    await begin_final_questions(message, state)

# ---------- Teachers availability (Q5) ----------
@router.message(Survey.q5_total)
async def q5_total(message: types.Message, state: FSMContext):
    await state.update_data(q5_total=message.text)
    await message.answer("ü§í –ê—É—Ä—É / –ë–æ–ª–µ—é—Ç ‚Äî —á–∏—Å–ª–æ:")
    await state.set_state(Survey.q5_illnes)

@router.message(Survey.q5_illnes)
async def q5_illnes(message: types.Message, state: FSMContext):
    await state.update_data(q5_illnes=message.text)
    await message.answer("üõ´ –Ü—Å—Å–∞–ø–∞—Ä / –ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞ ‚Äî —á–∏—Å–ª–æ:")
    await state.set_state(Survey.q5_flight)

@router.message(Survey.q5_flight)
async def q5_flight(message: types.Message, state: FSMContext):
    await state.update_data(q5_flight=message.text)
    await message.answer("üë§ –ñ–µ–∫–µ —Å–µ–±–µ–ø—Ç–µ—Ä / –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã ‚Äî —á–∏—Å–ª–æ:")
    await state.set_state(Survey.q5_individual)

@router.message(Survey.q5_individual)
async def q5_individual(message: types.Message, state: FSMContext):
    await state.update_data(q5_individual=message.text)
    await message.answer("üéì –ë—ñ–ª—ñ–∫—Ç—ñ–ª—ñ–∫—Ç—ñ –∞—Ä—Ç—Ç—ã—Ä—É / –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ ‚Äî —á–∏—Å–ª–æ:")
    await state.set_state(Survey.q5_cvalification)

@router.message(Survey.q5_cvalification)
async def q5_cvalification(message: types.Message, state: FSMContext):
    await state.update_data(q5_cvalification=message.text)
    await message.answer("‚ûï –ë–∞—Å“õ–∞ / –î—Ä—É–≥–æ–µ ‚Äî —á–∏—Å–ª–æ:")
    await state.set_state(Survey.q5_other)

@router.message(Survey.q5_other)
async def q5_other(message: types.Message, state: FSMContext):
    await state.update_data(q5_other=message.text)
    await begin_final_questions(message, state)

# ---------- Psych support (P3) ----------
@router.message(Survey.p3_category)
async def p3_category(message: types.Message, state: FSMContext):
    await state.update_data(p3_category=message.text)
    await message.answer("üìù “ö—ã—Å“õ–∞—à–∞ —Å–∏–ø–∞—Ç—Ç–∞–º–∞ / –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî ¬´–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç¬ª:")
    await state.set_state(Survey.p3_additional)

@router.message(Survey.p3_additional)
async def p3_additional(message: types.Message, state: FSMContext):
    await state.update_data(p3_additional=message.text)
    await begin_final_questions(message, state)

# ---------- Universal "Other" ----------
@router.message(Survey.other_input)
async def other_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    target = data.get("other_target")
    next_state = data.get("other_next")
    if target:
        await state.update_data({target: message.text})
    await state.update_data(other_target=None, other_next=None)
    if next_state:
        await state.set_state(getattr(Survey, next_state))
    else:
        await begin_final_questions(message, state)

# ---------- Final questions & Save ----------
async def begin_final_questions(message: types.Message, state: FSMContext):
    await message.answer(
        "6Ô∏è‚É£ “ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç / –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(Survey.extra_info)

@router.message(Survey.extra_info)
async def extra_info(message: types.Message, state: FSMContext):
    await state.update_data(extra_info=message.text)
    await message.answer(
        "6Ô∏è‚É£ –°—É—Ä–µ—Ç—Ç—ñ –∂“Ø–∫—Ç–µ—É / –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ (–º—ñ–Ω–¥–µ—Ç—Ç—ñ –µ–º–µ—Å / –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n"
        "–ú”ô—Å–µ–ª–µ–Ω—ñ“£ —Å—É—Ä–µ—Ç—ñ–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ ¬´–ñ–æ“õ¬ª –¥–µ–ø –∂–∞–∑—ã“£—ã–∑\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ù–µ—Ç¬ª",
        reply_markup=kb(["–ñ–æ“õ / –ù–µ—Ç"], row_size=1),
    )
    await state.set_state(Survey.photo)

@router.message(Survey.photo)
async def handle_photo(message: types.Message, state: FSMContext, bot: Bot):
    photo_url = ""
    
    if message.photo:
        # Get the largest photo size
        largest_photo = message.photo[-1]
        
        # Check file size
        if largest_photo.file_size and largest_photo.file_size > MAX_PHOTO_SIZE:
            await message.answer(
                "‚ùå –°—É—Ä–µ—Ç —Ç—ã–º “Ø–ª–∫–µ–Ω! –ú–∞–∫—Å–∏–º—É–º 10MB / –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ! –ú–∞–∫—Å–∏–º—É–º 10MB"
            )
            return
            
        # Save photo and get URL
        photo_url = await save_photo(bot, largest_photo)
        if photo_url:
            await message.answer(f"‚úÖ –°—É—Ä–µ—Ç —Å–∞“õ—Ç–∞–ª–¥—ã / –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {photo_url}")
        else:
            await message.answer("‚ùå –°—É—Ä–µ—Ç—Ç—ñ —Å–∞“õ—Ç–∞—É–¥–∞ “õ–∞—Ç–µ / –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")
    elif message.text and (message.text.startswith("–ñ–æ“õ") or message.text.startswith("–ù–µ—Ç")):
        photo_url = ""
        await message.answer("‚úÖ –°—É—Ä–µ—Ç –∂–æ“õ / –ë–µ–∑ —Ñ–æ—Ç–æ")
    else:
        await message.answer(
            "–°—É—Ä–µ—Ç –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ ¬´–ñ–æ“õ¬ª –¥–µ–ø –∂–∞–∑—ã“£—ã–∑ / –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ù–µ—Ç¬ª"
        )
        return
    
    await state.update_data(photo_url=photo_url)
    await message.answer(
        "7Ô∏è‚É£ –ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å “õ–∞–∂–µ—Ç –ø–µ? / –ù—É–∂–Ω–∞ –ª–∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å?",
        reply_markup=kb(["–ò”ô / –î–∞", "–ñ–æ“õ / –ù–µ—Ç"], row_size=2),
    )
    await state.set_state(Survey.need_callback)

@router.message(Survey.need_callback)
async def need_callback(message: types.Message, state: FSMContext):
    ans = message.text
    await state.update_data(want_callback=ans)
    if ans.startswith("–ò”ô") or ans.startswith("–î–∞"):
        await message.answer(
            "8Ô∏è‚É£ –ë–∞–π–ª–∞–Ω—ã—Å –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ–Ω “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑ / –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã (e-mail/—Ç–µ–ª–µ—Ñ–æ–Ω) ‚Äî ¬´–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç¬ª:",
            reply_markup=ReplyKeyboardRemove(),
        )
        await state.set_state(Survey.contact_info)
    else:
        await state.update_data(contact_info="")
        await finish_and_save(message, state)

@router.message(Survey.contact_info)
async def contact_info(message: types.Message, state: FSMContext):
    await state.update_data(contact_info=message.text)
    await finish_and_save(message, state)

ALMATY = timezone(timedelta(hours=5))  # Asia/Almaty UTC+05

def now_parts():
    now_local = datetime.now(ALMATY)
    return now_local.date().isoformat(), now_local.strftime("%H:%M")

def choose_block(data: dict) -> str:
    topic = (data.get("topic") or "").strip()
    # Cleanliness / Temperature
    if topic.startswith("üßΩ"):
        branch = (data.get("clean_branch") or "").strip()
        if branch.startswith("üßπ"):  # Class cleanliness
            return "S1"
        if branch.startswith("üè¢"):  # Common places
            return "S2"
        if branch.startswith("üå°"):  # Temperature
            return "S3"
    # Food ‚Üí Q4
    if topic.startswith("üçΩ"):
        return "Q4"
    # Study ‚Üí Q1/Q2/Q3
    if topic.startswith("üîî"):
        st = (data.get("study_topic") or "").lower()
        if "—Ä–∞—Å–ø–∏—Å" in st or "–∫–µ—Å—Ç–µ" in st or "—Å—Ä—ã–≤" in st:
            return "Q1"
        if "–ø”ô–Ω" in st or "–ø—Ä–µ–¥–º–µ—Ç" in st:
            return "Q2"
        return "Q3"  # discipline default
    # Complaints ‚Üí P1
    if topic.startswith("üë®‚Äçüë©‚Äçüë¶"):
        return "P1"
    # Safety ‚Üí S5/S6/S4
    if topic.startswith("‚ö†"):
        cat = (data.get("security_category") or "").strip()
        if cat.startswith("üö®"):
            return "S5"
        if cat.startswith("üëÆ"):
            return "S6"
        return "S4"
    # Ideas ‚Üí P2
    if topic.startswith("üí°"):
        return "P2"
    # Tech ‚Üí S7
    if topic.startswith("üñ•"):
        return "S7"
    # Health ‚Üí S8
    if topic.startswith("üè•"):
        return "S8"
    # Teachers availability ‚Üí Q5
    if topic.startswith("üßë‚Äçüè´"):
        return "Q5"
    # Psych support ‚Üí P3
    if topic.startswith("üß†"):
        return "P3"
    # Fallback
    return "P1"

def build_payload(block: str, data: dict) -> dict:
    date_str, time_str = now_parts()
    # Common
    common = {
        dv("School"): str(data.get("school", "")),
        dv("Date"): date_str,
        dv("Time"): time_str,
        dv("Role"): str(data.get("role", "")),
        dv("Photo"): str(data.get("photo_url", "")),
        dv("Data_from"): "Telegram Bot",
        dv("Add_inf"): str(data.get("extra_info", "")),
        dv("Contact"): str(data.get("contact_info", "")),
    }
    payload = dict(common)

    if block == "S1":
        payload.update({
            dv("Class_num"): str(data.get("study_class_number", "")),
            dv("Floor"): str(data.get("clean_floor", "")),
            dv("Classroom"): str(data.get("clean_classroom", "")),
            dv("Problem"): str(data.get("clean_problem_text", "")),
            dv("Condition"): str(data.get("clean_condition_3", "")),
            dv("Action"): "",
            dv("Status"): "",
        })
    elif block == "S2":
        payload.update({
            dv("Loc_num"): str(data.get("clean_classroom", "")),
            dv("Floor"): str(data.get("clean_floor", "")),
            dv("Location"): "Common place",
            dv("Place"): str(data.get("clean_specific_place", "")),
            dv("Problem"): str(data.get("clean_problem_text", "")),
            dv("Condition"): str(data.get("clean_condition_3", "")),
            dv("Action"): "",
            dv("Status"): "",
        })
    elif block == "S3":
        payload.update({
            dv("Loc_num"): str(data.get("clean_classroom", "")),
            dv("Floor"): str(data.get("clean_floor", "")),
            dv("Location"): str(data.get("temp_location", "")),
            dv("Place"): str(data.get("clean_specific_place", "")),
            dv("Problem"): str(data.get("temp_condition_choice", "")),
            dv("Condition"): "",
            dv("Action"): "",
            dv("Status"): "",
        })
    elif block == "S4":  # hazards
        payload.update({
            dv("Problem"): str(data.get("security_hazard_issue", "")),
            dv("Condition"): "",
            dv("Action"): "",
            dv("Status"): "",
        })
    elif block == "S5":  # incident
        payload.update({
            dv("Incident"): str(data.get("security_incident_type", "")),
            dv("Describtion"): str(data.get("security_incident_desc", "")),
            dv("Action"): "",
            dv("Status"): "",
        })
    elif block == "S6":  # guard
        payload.update({
            dv("Security"): str(data.get("security_guard_issue", "")),
            dv("Action"): "",
            dv("Status"): "",
        })
    elif block == "S7":  # tech
        room = data.get("tech_room")
        prob = str(data.get("tech_issue", "")) + (f" | –ö–∞–±–∏–Ω–µ—Ç: {room}" if room else "")
        payload.update({
            dv("Problem"): prob,
            dv("Action"): "",
            dv("Status"): "",
        })
    elif block == "S8":  # health
        payload.update({
            dv("Problem"): str(data.get("health_text", "")),
            dv("Action"): "",
            dv("Status"): "",
        })
    elif block == "Q1":  # schedule
        payload.update({
            dv("Problem"): str(data.get("schedule_problem", "")),
            dv("Grate"): str(data.get("study_class_number", "")),
            dv("Litter"): str(data.get("study_liter", "")),
            dv("Subject"): str(data.get("schedule_subject", "")),
            dv("Problem_date"): str(data.get("schedule_date", "")),
            dv("Action"): "",
            dv("Status"): "",
        })
    elif block == "Q2":  # subject issues
        payload.update({
            dv("Problem"): str(data.get("subject_problem", "")),
            dv("Grate"): str(data.get("study_class_number", "")),
            dv("Litter"): str(data.get("study_liter", "")),
            dv("Subject"): str(data.get("subject", "")),
            dv("Action"): "",
            dv("Status"): "",
        })
    elif block == "Q3":  # discipline
        payload.update({
            dv("Problem"): str(data.get("discipline_problem", "")),
            dv("Full_name"): str(data.get("discipline_student_name", "")),
            dv("Grate"): str(data.get("study_class_number", "")),
            dv("Litter"): str(data.get("study_liter", "")),
            dv("Action"): "",
            dv("Status"): "",
        })
    elif block == "Q4":  # food
        payload.update({
            dv("Problem"): str(data.get("food_problem", "")),
            dv("Action"): "",
            dv("Status"): "",
        })
    elif block == "Q5":  # teachers availability
        payload.update({
            dv("Total"): str(data.get("q5_total", "")),
            dv("Illness"): str(data.get("q5_illnes", "")),
            dv("Business_trip"): str(data.get("q5_flight", "")),
            dv("Individual"): str(data.get("q5_individual", "")),
            dv("Qualification"): str(data.get("q5_cvalification", "")),
            dv("Other"): str(data.get("q5_other", "")),
            dv("Action"): "",
            dv("Status"): "",
        })
    elif block == "P1":  # complaints
        payload.update({
            dv("Problem"): str(data.get("complaint_area", "")),
            dv("Describtion"): str(data.get("complaint_text", "")),
            dv("Action"): "",
            dv("Status"): "",
        })
    elif block == "P2":  # ideas
        payload.update({
            dv("Sphere"): str(data.get("idea_area", "")),
            dv("Result"): str(data.get("idea_effect", "")),
            dv("Describtion"): str(data.get("idea_description", "")),
            dv("Author"): str(data.get("idea_author", "")),
            dv("Action"): "",
            dv("Status"): "",
        })
    elif block == "P3":  # psych support
        payload.update({
            dv("Category"): str(data.get("p3_category", "")),
            dv("Describtion"): str(data.get("p3_additional", "")),
            dv("Action"): "",
            dv("Status"): "",
        })
    else:
        payload.update({
            dv("Problem"): str(data.get("topic", "")),
            dv("Describtion"): json.dumps(data, ensure_ascii=False),
        })

    return payload

async def finish_and_save(message: types.Message, state: FSMContext):
    data = await state.get_data()
    block = choose_block(data)
    try:
        table_name = TABLE_MAP.get(block)
        if not table_name:
            raise RuntimeError(f"No table mapped for block {block}")
        payload = build_payload(block, data)
        record_id = postgres_create(table_name, payload)
        await message.answer(
            "‚úÖ –†–∞“õ–º–µ—Ç! –ñ–∞—É–∞–ø—Ç–∞—Ä—ã“£—ã–∑ –¥–µ—Ä–µ–∫“õ–æ—Ä“ì–∞ —Å–∞“õ—Ç–∞–ª–¥—ã. / –°–ø–∞—Å–∏–±–æ! –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
            f"üì¶ –ë–ª–æ–∫: {block} ‚Üí –¢–∞–±–ª–∏—Ü–∞: {table_name}\n"
            f"üÜî –ó–∞–ø–∏—Å—å ID: {record_id}",
            reply_markup=ReplyKeyboardRemove(),
        )
    except Exception as e:
        await message.answer(f"‚ùå “ö–∞—Ç–µ: {e}")
    await state.clear()

# ==========================
# RUN
# ==========================
async def main():
    # Test database connection at startup
    if not test_db_connection():
        print("‚ùå Failed to connect to database. Please check your database configuration.")
        return
    
    print("üöÄ Starting Telegram bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())